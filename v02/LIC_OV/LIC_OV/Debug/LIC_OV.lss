
LIC_OV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001722  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000001e6  00800060  00800060  00001796  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000238  00000000  00000000  000017c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000288e  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000af5  00000000  00000000  0000428e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000102a  00000000  00000000  00004d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004e4  00000000  00000000  00005db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000008ee  00000000  00000000  00006294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ceb  00000000  00000000  00006b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001b8  00000000  00000000  0000786d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	5d c9       	rjmp	.-3398   	; 0xfffff2c6 <__eeprom_end+0xff7ef2c6>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	c2 c7       	rjmp	.+3972   	; 0xf9c <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	ed c7       	rjmp	.+4058   	; 0xff6 <__vector_13>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
      26:	24 c9       	rjmp	.-3512   	; 0xfffff270 <__eeprom_end+0xff7ef270>
      28:	26 c9       	rjmp	.-3508   	; 0xfffff276 <__eeprom_end+0xff7ef276>
      2a:	28 c9       	rjmp	.-3504   	; 0xfffff27c <__eeprom_end+0xff7ef27c>
      2c:	2a c9       	rjmp	.-3500   	; 0xfffff282 <__eeprom_end+0xff7ef282>
      2e:	2c c9       	rjmp	.-3496   	; 0xfffff288 <__eeprom_end+0xff7ef288>
      30:	2e c9       	rjmp	.-3492   	; 0xfffff28e <__eeprom_end+0xff7ef28e>
      32:	30 c9       	rjmp	.-3488   	; 0xfffff294 <__eeprom_end+0xff7ef294>
      34:	32 c9       	rjmp	.-3484   	; 0xfffff29a <__eeprom_end+0xff7ef29a>
      36:	34 c9       	rjmp	.-3480   	; 0xfffff2a0 <__eeprom_end+0xff7ef2a0>
      38:	36 c9       	rjmp	.-3476   	; 0xfffff2a6 <__eeprom_end+0xff7ef2a6>
      3a:	38 c9       	rjmp	.-3472   	; 0xfffff2ac <__eeprom_end+0xff7ef2ac>

0000003c <__ctors_end>:
      3c:	11 24       	eor	r1, r1
      3e:	1f be       	out	0x3f, r1	; 63
      40:	cf e5       	ldi	r28, 0x5F	; 95
      42:	d4 e0       	ldi	r29, 0x04	; 4
      44:	de bf       	out	0x3e, r29	; 62
      46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_clear_bss>:
      48:	22 e0       	ldi	r18, 0x02	; 2
      4a:	a0 e6       	ldi	r26, 0x60	; 96
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a6 34       	cpi	r26, 0x46	; 70
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	20 db       	rcall	.-2496   	; 0xfffff69a <__eeprom_end+0xff7ef69a>
      5a:	61 cb       	rjmp	.-2366   	; 0xfffff71e <__eeprom_end+0xff7ef71e>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <led_send>:

; 18-27 - volné registry
; 30-31 - volné registry

led_send:
            cli
      5e:	f8 94       	cli
            
            ldi     r30, lo8(leds)
      60:	e0 e4       	ldi	r30, 0x40	; 64
            ldi     r31, hi8(leds)
      62:	f2 e0       	ldi	r31, 0x02	; 2
            ld      r20, Z
      64:	40 81       	ld	r20, Z
            
            ; prepare data to PORTB (CLK bit)
            in      r18, PORTB
      66:	28 b3       	in	r18, 0x18	; 24
            mov     r19, r16
      68:	30 2f       	mov	r19, r16
            andi    r18, 0xFE
      6a:	2e 7f       	andi	r18, 0xFE	; 254
            ori     r19, 0x001
      6c:	31 60       	ori	r19, 0x01	; 1
            
            ; prepare data to send
            in      r21, PORTD
      6e:	52 b3       	in	r21, 0x12	; 18
            mov     r22, r19
      70:	63 2f       	mov	r22, r19
            andi    r21, 0x7F
      72:	5f 77       	andi	r21, 0x7F	; 127
            ori     r22, 0x80
      74:	60 68       	ori	r22, 0x80	; 128
            
            ldi     r23, 8
      76:	78 e0       	ldi	r23, 0x08	; 8

00000078 <bits>:
            
            ; send first 7 bits
bits:       out     PORTB, clkR
      78:	28 bb       	out	0x18, r18	; 24
            rol     dat
      7a:	44 1f       	adc	r20, r20
            out     PORTD, datR
      7c:	52 bb       	out	0x12, r21	; 18
            brcc    bit0
      7e:	08 f4       	brcc	.+2      	; 0x82 <bit0>
            out     PORTD, datS
      80:	62 bb       	out	0x12, r22	; 18

00000082 <bit0>:
bit0:       
            out     PORTB, clkS
      82:	38 bb       	out	0x18, r19	; 24
            dec     counter
      84:	7a 95       	dec	r23
            brne    bits
      86:	c1 f7       	brne	.-16     	; 0x78 <bits>
            
            sei
      88:	78 94       	sei
            ldi     r20, 0x90
      8a:	40 e9       	ldi	r20, 0x90	; 144
            out     PORTD, datR
      8c:	52 bb       	out	0x12, r21	; 18

0000008e <loop1>:

loop1:
            nop
      8e:	00 00       	nop
            dec     dat
      90:	4a 95       	dec	r20
            brne    loop1
      92:	e9 f7       	brne	.-6      	; 0x8e <loop1>

            out     PORTB, clkR
      94:	28 bb       	out	0x18, r18	; 24
	...

00000098 <ahead>:
            nop

ahead:
            ret
      98:	08 95       	ret

0000009a <adc_init>:
word adc_meas[8];

//----------------------------------------------------------
void adc_init(void)
{
  ADCSRA = BV(ADEN) | 5; // clk / 128
      9a:	85 e8       	ldi	r24, 0x85	; 133
      9c:	86 b9       	out	0x06, r24	; 6
  ADMUX  = 0x40;
      9e:	80 e4       	ldi	r24, 0x40	; 64
      a0:	87 b9       	out	0x07, r24	; 7
  adc_data = 0;
      a2:	10 92 78 00 	sts	0x0078, r1
      a6:	10 92 77 00 	sts	0x0077, r1
      aa:	08 95       	ret

000000ac <adc_read>:
}

word adc_read (byte channel)
{
  ADMUX = 0x40 | (channel & 7);
      ac:	87 70       	andi	r24, 0x07	; 7
      ae:	80 64       	ori	r24, 0x40	; 64
      b0:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b2:	86 ef       	ldi	r24, 0xF6	; 246
      b4:	8a 95       	dec	r24
      b6:	f1 f7       	brne	.-4      	; 0xb4 <adc_read+0x8>
  _delay_us(50);
  ADCSRA |= BV(ADSC);
      b8:	36 9a       	sbi	0x06, 6	; 6

  while ((ADCSRA & BV(ADSC)) > 0 );
      ba:	36 99       	sbic	0x06, 6	; 6
      bc:	fe cf       	rjmp	.-4      	; 0xba <adc_read+0xe>

  return (ADC);
      be:	84 b1       	in	r24, 0x04	; 4
      c0:	95 b1       	in	r25, 0x05	; 5
}
      c2:	08 95       	ret

000000c4 <adc_get>:

//----------------------------------------------------------
// get value from periodical scan
word adc_get(byte channel)
{
  if (channel < 8) {
      c4:	88 30       	cpi	r24, 0x08	; 8
      c6:	48 f4       	brcc	.+18     	; 0xda <adc_get+0x16>
    return adc_meas[channel];
      c8:	e8 2f       	mov	r30, r24
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	ee 0f       	add	r30, r30
      ce:	ff 1f       	adc	r31, r31
      d0:	e7 58       	subi	r30, 0x87	; 135
      d2:	ff 4f       	sbci	r31, 0xFF	; 255
      d4:	80 81       	ld	r24, Z
      d6:	91 81       	ldd	r25, Z+1	; 0x01
      d8:	08 95       	ret
   } else {
    return 0;
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	90 e0       	ldi	r25, 0x00	; 0
  }
}
      de:	08 95       	ret

000000e0 <adc_process>:

//----------------------------------------------------------
// periodicaly measure all channels
void adc_process(void)
{
      e0:	cf 93       	push	r28
  static byte meas_state = 0; // state machine
  
  switch (meas_state) {
      e2:	c0 91 60 00 	lds	r28, 0x0060
      e6:	c8 30       	cpi	r28, 0x08	; 8
      e8:	18 f0       	brcs	.+6      	; 0xf0 <adc_process+0x10>
      ea:	ce 31       	cpi	r28, 0x1E	; 30
      ec:	89 f0       	breq	.+34     	; 0x110 <adc_process+0x30>
      ee:	12 c0       	rjmp	.+36     	; 0x114 <adc_process+0x34>
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      adc_meas[meas_state] = adc_read(meas_state);
      f0:	8c 2f       	mov	r24, r28
      f2:	dc df       	rcall	.-72     	; 0xac <adc_read>
      f4:	ec 2f       	mov	r30, r28
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	ee 0f       	add	r30, r30
      fa:	ff 1f       	adc	r31, r31
      fc:	e7 58       	subi	r30, 0x87	; 135
      fe:	ff 4f       	sbci	r31, 0xFF	; 255
     100:	91 83       	std	Z+1, r25	; 0x01
     102:	80 83       	st	Z, r24
      meas_state++;
     104:	80 91 60 00 	lds	r24, 0x0060
     108:	8f 5f       	subi	r24, 0xFF	; 255
     10a:	80 93 60 00 	sts	0x0060, r24
      break;
     10e:	07 c0       	rjmp	.+14     	; 0x11e <adc_process+0x3e>
    case 30:
      meas_state = 0;
     110:	10 92 60 00 	sts	0x0060, r1
    default:
      meas_state++;
     114:	80 91 60 00 	lds	r24, 0x0060
     118:	8f 5f       	subi	r24, 0xFF	; 255
     11a:	80 93 60 00 	sts	0x0060, r24
      break;
  }
  
}
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <timer_init>:

  // * Timer 1 - system timer and 2× PWM
  // 14745600 / 256 / 576 = 100 Hz
  //   Xtal  /presca/ TOP
  
  OCR1A = 0;
     122:	1b bc       	out	0x2b, r1	; 43
     124:	1a bc       	out	0x2a, r1	; 42
  OCR1B = 0;
     126:	19 bc       	out	0x29, r1	; 41
     128:	18 bc       	out	0x28, r1	; 40
  ICR1 = 575; 
     12a:	8f e3       	ldi	r24, 0x3F	; 63
     12c:	92 e0       	ldi	r25, 0x02	; 2
     12e:	97 bd       	out	0x27, r25	; 39
     130:	86 bd       	out	0x26, r24	; 38
  TCCR1A = BV(WGM11) | BV(COM1A1) | BV(COM1B1); // Fast PWM
     132:	82 ea       	ldi	r24, 0xA2	; 162
     134:	8f bd       	out	0x2f, r24	; 47
  TCCR1B = BV(WGM12) | BV(WGM13) | 3; // Fast PWM + presca = 1024
     136:	8b e1       	ldi	r24, 0x1B	; 27
     138:	8e bd       	out	0x2e, r24	; 46
  TIMSK |= BV(TICIE1); // capt int enabled
     13a:	89 b7       	in	r24, 0x39	; 57
     13c:	80 62       	ori	r24, 0x20	; 32
     13e:	89 bf       	out	0x39, r24	; 57
     140:	08 95       	ret

00000142 <TB_Send>:
/******************************************************/
// private functions
/******************************************************/
void TB_Send(void)
{
  if (TB_Callback_TX != NULL) TB_Callback_TX();
     142:	e0 91 63 00 	lds	r30, 0x0063
     146:	f0 91 64 00 	lds	r31, 0x0064
     14a:	30 97       	sbiw	r30, 0x00	; 0
     14c:	09 f0       	breq	.+2      	; 0x150 <TB_Send+0xe>
     14e:	09 95       	icall
     150:	08 95       	ret

00000152 <TB_calcSum>:
}


/******************************************************/
void TB_calcSum(void)
{
     152:	eb ea       	ldi	r30, 0xAB	; 171
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	83 eb       	ldi	r24, 0xB3	; 179
     158:	90 e0       	ldi	r25, 0x00	; 0
  byte i, sum;
  sum = 0;
     15a:	20 e0       	ldi	r18, 0x00	; 0
  for(i=0; i<8; i++) {
    sum += TB_bufOut[i];
     15c:	31 91       	ld	r19, Z+
     15e:	23 0f       	add	r18, r19
/******************************************************/
void TB_calcSum(void)
{
  byte i, sum;
  sum = 0;
  for(i=0; i<8; i++) {
     160:	e8 17       	cp	r30, r24
     162:	f9 07       	cpc	r31, r25
     164:	d9 f7       	brne	.-10     	; 0x15c <TB_calcSum+0xa>
    sum += TB_bufOut[i];
  }
  TB_bufOut[TB_BUF_SUM] = sum;
     166:	20 93 b3 00 	sts	0x00B3, r18
     16a:	08 95       	ret

0000016c <TB_Init>:
/******************************************************/
// public functions
/******************************************************/
// initialize
void TB_Init(void * setting_in_eeprom)
{
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	ec 01       	movw	r28, r24
  addr_setting_in_eeprom = setting_in_eeprom;
     172:	90 93 c5 00 	sts	0x00C5, r25
     176:	80 93 c4 00 	sts	0x00C4, r24
  //                 DST,   SRC, size
  eeprom_read_block((void *) &TB_gbparam, setting_in_eeprom, sizeof(struct TB_GBPARAM));
     17a:	45 e0       	ldi	r20, 0x05	; 5
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	bc 01       	movw	r22, r24
     180:	84 eb       	ldi	r24, 0xB4	; 180
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	95 da       	rcall	.-2774   	; 0xfffff6b0 <__eeprom_end+0xff7ef6b0>
  if (TB_gbparam.eemagic != 66) {
     186:	80 91 b4 00 	lds	r24, 0x00B4
     18a:	82 34       	cpi	r24, 0x42	; 66
     18c:	a1 f0       	breq	.+40     	; 0x1b6 <TB_Init+0x4a>
    // not valid data in eeprom
    TB_gbparam.eemagic = 66;
     18e:	82 e4       	ldi	r24, 0x42	; 66
     190:	80 93 b4 00 	sts	0x00B4, r24
    TB_gbparam.baud = 4;
     194:	84 e0       	ldi	r24, 0x04	; 4
     196:	80 93 b5 00 	sts	0x00B5, r24
    TB_gbparam.address = 3;
     19a:	83 e0       	ldi	r24, 0x03	; 3
     19c:	80 93 b6 00 	sts	0x00B6, r24
    TB_gbparam.telegram_pause_time = 0;
     1a0:	10 92 b7 00 	sts	0x00B7, r1
    TB_gbparam.host_address = 2;
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	80 93 b8 00 	sts	0x00B8, r24
    // save default setting to eeprom
    eeprom_write_block((void *) &TB_gbparam, setting_in_eeprom, sizeof(struct TB_GBPARAM));
     1aa:	45 e0       	ldi	r20, 0x05	; 5
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	be 01       	movw	r22, r28
     1b0:	84 eb       	ldi	r24, 0xB4	; 180
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9e da       	rcall	.-2756   	; 0xfffff6f2 <__eeprom_end+0xff7ef6f2>
  }
  // ted mame funkèni konfiguraci naètenou

  // zvolíme správnou komunikaèní rychlost:
  if (TB_Callback_setBaud != NULL) TB_Callback_setBaud(TB_gbparam.baud);
     1b6:	e0 91 61 00 	lds	r30, 0x0061
     1ba:	f0 91 62 00 	lds	r31, 0x0062
     1be:	30 97       	sbiw	r30, 0x00	; 0
     1c0:	19 f0       	breq	.+6      	; 0x1c8 <TB_Init+0x5c>
     1c2:	80 91 b5 00 	lds	r24, 0x00B5
     1c6:	09 95       	icall

  // poznaèíme si adresy
  TB_AddrReply = TB_gbparam.host_address;
     1c8:	80 91 b8 00 	lds	r24, 0x00B8
     1cc:	80 93 c6 00 	sts	0x00C6, r24
  TB_AddrModule= TB_gbparam.address;
     1d0:	80 91 b6 00 	lds	r24, 0x00B6
     1d4:	80 93 ba 00 	sts	0x00BA, r24
}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <TB_SendAck>:

/******************************************************/
// send response from module
void TB_SendAck(byte status, long int value)
{
  TB_bufOut[0] = TB_AddrReply;
     1de:	90 91 c6 00 	lds	r25, 0x00C6
     1e2:	90 93 ab 00 	sts	0x00AB, r25
  TB_bufOut[1] = TB_AddrModule;
     1e6:	90 91 ba 00 	lds	r25, 0x00BA
     1ea:	90 93 ac 00 	sts	0x00AC, r25
  TB_bufOut[2] = status;
     1ee:	80 93 ad 00 	sts	0x00AD, r24
  TB_bufOut[3] = TB_bufIn[TB_BUF_COMMAND]; //command;
     1f2:	80 91 bc 00 	lds	r24, 0x00BC
     1f6:	80 93 ae 00 	sts	0x00AE, r24
  TB_bufOut[4] = value >> 24;
     1fa:	70 93 af 00 	sts	0x00AF, r23
  TB_bufOut[5] = value >> 16;
     1fe:	60 93 b0 00 	sts	0x00B0, r22
  TB_bufOut[6] = value >> 8;
     202:	50 93 b1 00 	sts	0x00B1, r21
  TB_bufOut[7] = value >> 0;
     206:	40 93 b2 00 	sts	0x00B2, r20
  TB_calcSum();
     20a:	a3 df       	rcall	.-186    	; 0x152 <TB_calcSum>
  TB_Send();
     20c:	9a df       	rcall	.-204    	; 0x142 <TB_Send>
     20e:	08 95       	ret

00000210 <TB_Read>:
{
  byte i;
  byte sum;

  // check address
  if (TB_bufIn[TB_BUF_ADDRESS] != TB_AddrModule) return 2;
     210:	90 91 bb 00 	lds	r25, 0x00BB
     214:	80 91 ba 00 	lds	r24, 0x00BA
     218:	98 13       	cpse	r25, r24
     21a:	15 c0       	rjmp	.+42     	; 0x246 <TB_Read+0x36>
     21c:	eb eb       	ldi	r30, 0xBB	; 187
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	83 ec       	ldi	r24, 0xC3	; 195
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	20 e0       	ldi	r18, 0x00	; 0
  
  // check SUM byte
  sum = 0;
  for( i=0; i<8; i++) {
    sum += TB_bufIn[i];
     226:	31 91       	ld	r19, Z+
     228:	23 0f       	add	r18, r19
  // check address
  if (TB_bufIn[TB_BUF_ADDRESS] != TB_AddrModule) return 2;
  
  // check SUM byte
  sum = 0;
  for( i=0; i<8; i++) {
     22a:	e8 17       	cp	r30, r24
     22c:	f9 07       	cpc	r31, r25
     22e:	d9 f7       	brne	.-10     	; 0x226 <TB_Read+0x16>
    sum += TB_bufIn[i];
  }
  if (sum != TB_bufIn[TB_BUF_SUM]) {
     230:	80 91 c3 00 	lds	r24, 0x00C3
     234:	28 17       	cp	r18, r24
     236:	49 f0       	breq	.+18     	; 0x24a <TB_Read+0x3a>
    TB_SendAck(1, 0); // wrong checksum
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	ba 01       	movw	r22, r20
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	ce df       	rcall	.-100    	; 0x1de <TB_SendAck>
    return 3; // bad checksum
     242:	83 e0       	ldi	r24, 0x03	; 3
     244:	08 95       	ret
{
  byte i;
  byte sum;

  // check address
  if (TB_bufIn[TB_BUF_ADDRESS] != TB_AddrModule) return 2;
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	08 95       	ret
    TB_SendAck(1, 0); // wrong checksum
    return 3; // bad checksum
  }

  // we have valid data in TB_bufIn
  return 0;
     24a:	80 e0       	ldi	r24, 0x00	; 0
}
     24c:	08 95       	ret

0000024e <TB_Decode>:

/******************************************************/
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	1f 92       	push	r1
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
  volatile byte b;
  TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
     25c:	20 91 bf 00 	lds	r18, 0x00BF
             (((int32_t) TB_bufIn[5]) << 16) |
     260:	60 91 c0 00 	lds	r22, 0x00C0
     264:	86 2f       	mov	r24, r22
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e0       	ldi	r27, 0x00	; 0
     26c:	dc 01       	movw	r26, r24
     26e:	99 27       	eor	r25, r25
     270:	88 27       	eor	r24, r24
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
  volatile byte b;
  TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
     272:	b2 2b       	or	r27, r18
             (((int32_t) TB_bufIn[5]) << 16) |
             (((int32_t) TB_bufIn[6]) <<  8) |
             (((int32_t) TB_bufIn[7])      ) ;
     274:	20 91 c2 00 	lds	r18, 0x00C2
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
  volatile byte b;
  TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
             (((int32_t) TB_bufIn[5]) << 16) |
     278:	82 2b       	or	r24, r18
             (((int32_t) TB_bufIn[6]) <<  8) |
     27a:	20 91 c1 00 	lds	r18, 0x00C1
     27e:	bc 01       	movw	r22, r24
     280:	cd 01       	movw	r24, r26
     282:	72 2b       	or	r23, r18
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
  volatile byte b;
  TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
     284:	60 93 a7 00 	sts	0x00A7, r22
     288:	70 93 a8 00 	sts	0x00A8, r23
     28c:	80 93 a9 00 	sts	0x00A9, r24
     290:	90 93 aa 00 	sts	0x00AA, r25
             (((int32_t) TB_bufIn[5]) << 16) |
             (((int32_t) TB_bufIn[6]) <<  8) |
             (((int32_t) TB_bufIn[7])      ) ;

  switch (TB_bufIn[TB_BUF_COMMAND]) {
     294:	20 91 bc 00 	lds	r18, 0x00BC
     298:	29 30       	cpi	r18, 0x09	; 9
     29a:	09 f4       	brne	.+2      	; 0x29e <TB_Decode+0x50>
     29c:	ac c1       	rjmp	.+856    	; 0x5f6 <__stack+0x197>
     29e:	78 f4       	brcc	.+30     	; 0x2be <TB_Decode+0x70>
     2a0:	24 30       	cpi	r18, 0x04	; 4
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <TB_Decode+0x58>
     2a4:	b1 c2       	rjmp	.+1378   	; 0x808 <__stack+0x3a9>
     2a6:	28 f4       	brcc	.+10     	; 0x2b2 <TB_Decode+0x64>
     2a8:	21 30       	cpi	r18, 0x01	; 1
     2aa:	f9 f0       	breq	.+62     	; 0x2ea <TB_Decode+0x9c>
     2ac:	22 30       	cpi	r18, 0x02	; 2
     2ae:	21 f1       	breq	.+72     	; 0x2f8 <TB_Decode+0xaa>
     2b0:	a4 c2       	rjmp	.+1352   	; 0x7fa <__stack+0x39b>
     2b2:	25 30       	cpi	r18, 0x05	; 5
     2b4:	41 f1       	breq	.+80     	; 0x306 <TB_Decode+0xb8>
     2b6:	26 30       	cpi	r18, 0x06	; 6
     2b8:	09 f4       	brne	.+2      	; 0x2bc <TB_Decode+0x6e>
     2ba:	6c c0       	rjmp	.+216    	; 0x394 <TB_Decode+0x146>
     2bc:	9e c2       	rjmp	.+1340   	; 0x7fa <__stack+0x39b>
     2be:	2e 30       	cpi	r18, 0x0E	; 14
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <TB_Decode+0x76>
     2c2:	e0 c0       	rjmp	.+448    	; 0x484 <__stack+0x25>
     2c4:	38 f4       	brcc	.+14     	; 0x2d4 <TB_Decode+0x86>
     2c6:	2a 30       	cpi	r18, 0x0A	; 10
     2c8:	09 f4       	brne	.+2      	; 0x2cc <TB_Decode+0x7e>
     2ca:	2d c2       	rjmp	.+1114   	; 0x726 <__stack+0x2c7>
     2cc:	2d 30       	cpi	r18, 0x0D	; 13
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <TB_Decode+0x84>
     2d0:	90 c1       	rjmp	.+800    	; 0x5f2 <__stack+0x193>
     2d2:	93 c2       	rjmp	.+1318   	; 0x7fa <__stack+0x39b>
     2d4:	28 38       	cpi	r18, 0x88	; 136
     2d6:	09 f4       	brne	.+2      	; 0x2da <TB_Decode+0x8c>
     2d8:	69 c2       	rjmp	.+1234   	; 0x7ac <__stack+0x34d>
     2da:	2e 3f       	cpi	r18, 0xFE	; 254
     2dc:	21 f0       	breq	.+8      	; 0x2e6 <TB_Decode+0x98>
     2de:	2f 30       	cpi	r18, 0x0F	; 15
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <TB_Decode+0x96>
     2e2:	8b c2       	rjmp	.+1302   	; 0x7fa <__stack+0x39b>
     2e4:	1a c1       	rjmp	.+564    	; 0x51a <__stack+0xbb>
    case TB_CMD_DEBUG:
      return TB_CMD_DEBUG;
     2e6:	8e ef       	ldi	r24, 0xFE	; 254
     2e8:	94 c2       	rjmp	.+1320   	; 0x812 <__stack+0x3b3>
      break;
    case TB_CMD_ROR:
      TB_SendAck(TB_ERR_OK, 0);
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	ba 01       	movw	r22, r20
     2f0:	84 e6       	ldi	r24, 0x64	; 100
     2f2:	75 df       	rcall	.-278    	; 0x1de <TB_SendAck>
      return TB_CMD_ROR;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	8d c2       	rjmp	.+1306   	; 0x812 <__stack+0x3b3>
      break;
    case TB_CMD_ROL:
      TB_SendAck(TB_ERR_OK, 0);
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	ba 01       	movw	r22, r20
     2fe:	84 e6       	ldi	r24, 0x64	; 100
     300:	6e df       	rcall	.-292    	; 0x1de <TB_SendAck>
      return TB_CMD_ROL;
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	86 c2       	rjmp	.+1292   	; 0x812 <__stack+0x3b3>
      break;
    case TB_CMD_MVP:
      return TB_CMD_MVP;
      break;
    case TB_CMD_SAP: // set axis parameter
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
     306:	20 91 be 00 	lds	r18, 0x00BE
     30a:	22 23       	and	r18, r18
     30c:	39 f0       	breq	.+14     	; 0x31c <TB_Decode+0xce>
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	ba 01       	movw	r22, r20
     314:	84 e0       	ldi	r24, 0x04	; 4
     316:	63 df       	rcall	.-314    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	7b c2       	rjmp	.+1270   	; 0x812 <__stack+0x3b3>
      break;
    case TB_CMD_SAP: // set axis parameter
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
     31c:	20 91 bd 00 	lds	r18, 0x00BD
     320:	26 30       	cpi	r18, 0x06	; 6
     322:	e9 f0       	breq	.+58     	; 0x35e <TB_Decode+0x110>
     324:	28 f4       	brcc	.+10     	; 0x330 <TB_Decode+0xe2>
     326:	24 30       	cpi	r18, 0x04	; 4
     328:	41 f0       	breq	.+16     	; 0x33a <TB_Decode+0xec>
     32a:	25 30       	cpi	r18, 0x05	; 5
     32c:	79 f0       	breq	.+30     	; 0x34c <TB_Decode+0xfe>
     32e:	2b c0       	rjmp	.+86     	; 0x386 <TB_Decode+0x138>
     330:	27 30       	cpi	r18, 0x07	; 7
     332:	f1 f0       	breq	.+60     	; 0x370 <TB_Decode+0x122>
     334:	2c 38       	cpi	r18, 0x8C	; 140
     336:	29 f1       	breq	.+74     	; 0x382 <TB_Decode+0x134>
     338:	26 c0       	rjmp	.+76     	; 0x386 <TB_Decode+0x138>
          case TB_PARAM_SPEED:
            TB_param.speed = TB_Value;
     33a:	60 93 92 00 	sts	0x0092, r22
     33e:	70 93 93 00 	sts	0x0093, r23
     342:	80 93 94 00 	sts	0x0094, r24
     346:	90 93 95 00 	sts	0x0095, r25
            break;
     34a:	1d c0       	rjmp	.+58     	; 0x386 <TB_Decode+0x138>
          case TB_PARAM_ACCELERATION:
            TB_param.acceleration = TB_Value;
     34c:	60 93 96 00 	sts	0x0096, r22
     350:	70 93 97 00 	sts	0x0097, r23
     354:	80 93 98 00 	sts	0x0098, r24
     358:	90 93 99 00 	sts	0x0099, r25
            break;
     35c:	14 c0       	rjmp	.+40     	; 0x386 <TB_Decode+0x138>
          case TB_PARAM_CURRENT_RUN:
            TB_param.current = TB_Value;
     35e:	60 93 9a 00 	sts	0x009A, r22
     362:	70 93 9b 00 	sts	0x009B, r23
     366:	80 93 9c 00 	sts	0x009C, r24
     36a:	90 93 9d 00 	sts	0x009D, r25
            break;
     36e:	0b c0       	rjmp	.+22     	; 0x386 <TB_Decode+0x138>
          case TB_PARAM_CURRENT_HOLD:
            TB_param.current_hold = TB_Value;
     370:	60 93 9e 00 	sts	0x009E, r22
     374:	70 93 9f 00 	sts	0x009F, r23
     378:	80 93 a0 00 	sts	0x00A0, r24
     37c:	90 93 a1 00 	sts	0x00A1, r25
            break;
     380:	02 c0       	rjmp	.+4      	; 0x386 <TB_Decode+0x138>
          case TB_PARAM_RESOLUTION:
            TB_param.resolution = TB_Value;
     382:	60 93 a2 00 	sts	0x00A2, r22

/******************************************************/
// send OK response from module
inline void TB_SendAckOK(void)
{
  TB_SendAck(100, 0);
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	ba 01       	movw	r22, r20
     38c:	84 e6       	ldi	r24, 0x64	; 100
     38e:	27 df       	rcall	.-434    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	3f c2       	rjmp	.+1150   	; 0x812 <__stack+0x3b3>
        }
        TB_SendAckOK();
      }
      break;
    case TB_CMD_GAP: // get axis parameter
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
     394:	80 91 be 00 	lds	r24, 0x00BE
     398:	88 23       	and	r24, r24
     39a:	39 f0       	breq	.+14     	; 0x3aa <TB_Decode+0x15c>
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	ba 01       	movw	r22, r20
     3a2:	84 e0       	ldi	r24, 0x04	; 4
     3a4:	1c df       	rcall	.-456    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	34 c2       	rjmp	.+1128   	; 0x812 <__stack+0x3b3>
      break;
    case TB_CMD_GAP: // get axis parameter
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
     3aa:	80 91 bd 00 	lds	r24, 0x00BD
     3ae:	86 30       	cpi	r24, 0x06	; 6
     3b0:	49 f1       	breq	.+82     	; 0x404 <TB_Decode+0x1b6>
     3b2:	30 f4       	brcc	.+12     	; 0x3c0 <TB_Decode+0x172>
     3b4:	84 30       	cpi	r24, 0x04	; 4
     3b6:	f1 f1       	breq	.+124    	; 0x434 <TB_Decode+0x1e6>
     3b8:	c8 f4       	brcc	.+50     	; 0x3ec <TB_Decode+0x19e>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	59 f0       	breq	.+22     	; 0x3d4 <TB_Decode+0x186>
     3be:	5b c0       	rjmp	.+182    	; 0x476 <__stack+0x17>
     3c0:	8c 38       	cpi	r24, 0x8C	; 140
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <TB_Decode+0x178>
     3c4:	43 c0       	rjmp	.+134    	; 0x44c <TB_Decode+0x1fe>
     3c6:	84 3c       	cpi	r24, 0xC4	; 196
     3c8:	09 f4       	brne	.+2      	; 0x3cc <TB_Decode+0x17e>
     3ca:	49 c0       	rjmp	.+146    	; 0x45e <TB_Decode+0x210>
     3cc:	87 30       	cpi	r24, 0x07	; 7
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <TB_Decode+0x184>
     3d0:	52 c0       	rjmp	.+164    	; 0x476 <__stack+0x17>
     3d2:	24 c0       	rjmp	.+72     	; 0x41c <TB_Decode+0x1ce>
          case TB_PARAM_ACTUAL_POSITION:
            TB_SendAck(TB_ERR_OK, TB_param.actual_position);
     3d4:	40 91 8e 00 	lds	r20, 0x008E
     3d8:	50 91 8f 00 	lds	r21, 0x008F
     3dc:	60 91 90 00 	lds	r22, 0x0090
     3e0:	70 91 91 00 	lds	r23, 0x0091
     3e4:	84 e6       	ldi	r24, 0x64	; 100
     3e6:	fb de       	rcall	.-522    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     3e8:	80 e0       	ldi	r24, 0x00	; 0
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
          case TB_PARAM_ACTUAL_POSITION:
            TB_SendAck(TB_ERR_OK, TB_param.actual_position);
            break;
     3ea:	13 c2       	rjmp	.+1062   	; 0x812 <__stack+0x3b3>
          case TB_PARAM_ACCELERATION:
            TB_SendAck(TB_ERR_OK, TB_param.acceleration);
     3ec:	40 91 96 00 	lds	r20, 0x0096
     3f0:	50 91 97 00 	lds	r21, 0x0097
     3f4:	60 91 98 00 	lds	r22, 0x0098
     3f8:	70 91 99 00 	lds	r23, 0x0099
     3fc:	84 e6       	ldi	r24, 0x64	; 100
     3fe:	ef de       	rcall	.-546    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     400:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_ACTUAL_POSITION:
            TB_SendAck(TB_ERR_OK, TB_param.actual_position);
            break;
          case TB_PARAM_ACCELERATION:
            TB_SendAck(TB_ERR_OK, TB_param.acceleration);
            break;
     402:	07 c2       	rjmp	.+1038   	; 0x812 <__stack+0x3b3>
          case TB_PARAM_CURRENT_RUN:
            TB_SendAck(TB_ERR_OK, TB_param.current);
     404:	40 91 9a 00 	lds	r20, 0x009A
     408:	50 91 9b 00 	lds	r21, 0x009B
     40c:	60 91 9c 00 	lds	r22, 0x009C
     410:	70 91 9d 00 	lds	r23, 0x009D
     414:	84 e6       	ldi	r24, 0x64	; 100
     416:	e3 de       	rcall	.-570    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     418:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_ACCELERATION:
            TB_SendAck(TB_ERR_OK, TB_param.acceleration);
            break;
          case TB_PARAM_CURRENT_RUN:
            TB_SendAck(TB_ERR_OK, TB_param.current);
            break;
     41a:	fb c1       	rjmp	.+1014   	; 0x812 <__stack+0x3b3>
          case TB_PARAM_CURRENT_HOLD:
            TB_SendAck(TB_ERR_OK, TB_param.current_hold);
     41c:	40 91 9e 00 	lds	r20, 0x009E
     420:	50 91 9f 00 	lds	r21, 0x009F
     424:	60 91 a0 00 	lds	r22, 0x00A0
     428:	70 91 a1 00 	lds	r23, 0x00A1
     42c:	84 e6       	ldi	r24, 0x64	; 100
     42e:	d7 de       	rcall	.-594    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     430:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_CURRENT_RUN:
            TB_SendAck(TB_ERR_OK, TB_param.current);
            break;
          case TB_PARAM_CURRENT_HOLD:
            TB_SendAck(TB_ERR_OK, TB_param.current_hold);
            break;
     432:	ef c1       	rjmp	.+990    	; 0x812 <__stack+0x3b3>
          case TB_PARAM_SPEED:
            TB_SendAck(TB_ERR_OK, TB_param.speed);
     434:	40 91 92 00 	lds	r20, 0x0092
     438:	50 91 93 00 	lds	r21, 0x0093
     43c:	60 91 94 00 	lds	r22, 0x0094
     440:	70 91 95 00 	lds	r23, 0x0095
     444:	84 e6       	ldi	r24, 0x64	; 100
     446:	cb de       	rcall	.-618    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     448:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_CURRENT_HOLD:
            TB_SendAck(TB_ERR_OK, TB_param.current_hold);
            break;
          case TB_PARAM_SPEED:
            TB_SendAck(TB_ERR_OK, TB_param.speed);
            break;
     44a:	e3 c1       	rjmp	.+966    	; 0x812 <__stack+0x3b3>
          case TB_PARAM_RESOLUTION:
            TB_SendAck(TB_ERR_OK, TB_param.resolution);
     44c:	40 91 a2 00 	lds	r20, 0x00A2
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	84 e6       	ldi	r24, 0x64	; 100
     458:	c2 de       	rcall	.-636    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     45a:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_SPEED:
            TB_SendAck(TB_ERR_OK, TB_param.speed);
            break;
          case TB_PARAM_RESOLUTION:
            TB_SendAck(TB_ERR_OK, TB_param.resolution);
            break;
     45c:	da c1       	rjmp	.+948    	; 0x812 <__stack+0x3b3>
          case TB_PARAM_RFS_DISTANCE:
            TB_SendAck(TB_ERR_OK, TB_param.rfs_distance);
     45e:	40 91 a3 00 	lds	r20, 0x00A3
     462:	50 91 a4 00 	lds	r21, 0x00A4
     466:	60 91 a5 00 	lds	r22, 0x00A5
     46a:	70 91 a6 00 	lds	r23, 0x00A6
     46e:	84 e6       	ldi	r24, 0x64	; 100
     470:	b6 de       	rcall	.-660    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     472:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_RESOLUTION:
            TB_SendAck(TB_ERR_OK, TB_param.resolution);
            break;
          case TB_PARAM_RFS_DISTANCE:
            TB_SendAck(TB_ERR_OK, TB_param.rfs_distance);
            break;
     474:	ce c1       	rjmp	.+924    	; 0x812 <__stack+0x3b3>
// doplnit nastavitelné parametry
          default:
            TB_SendAck(TB_ERR_VALUE, 0);
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	ba 01       	movw	r22, r20
     47c:	84 e0       	ldi	r24, 0x04	; 4
     47e:	af de       	rcall	.-674    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     480:	80 e0       	ldi	r24, 0x00	; 0
            TB_SendAck(TB_ERR_OK, TB_param.rfs_distance);
            break;
// doplnit nastavitelné parametry
          default:
            TB_SendAck(TB_ERR_VALUE, 0);
            break;
     482:	c7 c1       	rjmp	.+910    	; 0x812 <__stack+0x3b3>
        }
      }
      break;
    case TB_CMD_SIO:
      switch (TB_bufIn[TB_BUF_MOTOR]) {
     484:	20 91 be 00 	lds	r18, 0x00BE
     488:	21 30       	cpi	r18, 0x01	; 1
     48a:	09 f4       	brne	.+2      	; 0x48e <__stack+0x2f>
     48c:	bf c1       	rjmp	.+894    	; 0x80c <__stack+0x3ad>
     48e:	18 f0       	brcs	.+6      	; 0x496 <__stack+0x37>
     490:	22 30       	cpi	r18, 0x02	; 2
     492:	41 f0       	breq	.+16     	; 0x4a4 <__stack+0x45>
     494:	3b c0       	rjmp	.+118    	; 0x50c <__stack+0xad>
        case 0:
          #ifdef TB_SIO_BANK_0_IMPLEMENTED
            return TB_CMD_SIO;
          #else
            TB_SendAck(TB_ERR_TYPE, 0); // invalid value
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	ba 01       	movw	r22, r20
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	9f de       	rcall	.-706    	; 0x1de <TB_SendAck>
          }
          break;
        default:
          TB_SendAck(TB_ERR_TYPE, 0); // invalid value
      }
      return TB_CMD_SIO;
     4a0:	8e e0       	ldi	r24, 0x0E	; 14
          #ifdef TB_SIO_BANK_0_IMPLEMENTED
            return TB_CMD_SIO;
          #else
            TB_SendAck(TB_ERR_TYPE, 0); // invalid value
          #endif
          break;
     4a2:	b7 c1       	rjmp	.+878    	; 0x812 <__stack+0x3b3>
          #else
            TB_SendAck(TB_ERR_TYPE, 0); // invalid value
          #endif
          break;
        case 2:
          switch (TB_bufIn[TB_BUF_TYPE]) {
     4a4:	20 91 bd 00 	lds	r18, 0x00BD
     4a8:	22 23       	and	r18, r18
     4aa:	19 f0       	breq	.+6      	; 0x4b2 <__stack+0x53>
     4ac:	21 30       	cpi	r18, 0x01	; 1
     4ae:	a1 f0       	breq	.+40     	; 0x4d8 <__stack+0x79>
     4b0:	26 c0       	rjmp	.+76     	; 0x4fe <__stack+0x9f>
            case 0:
              TB_out.b0 = (TB_Value != 0);
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	67 2b       	or	r22, r23
     4b6:	68 2b       	or	r22, r24
     4b8:	69 2b       	or	r22, r25
     4ba:	09 f4       	brne	.+2      	; 0x4be <__stack+0x5f>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	80 91 89 00 	lds	r24, 0x0089
     4c2:	20 fb       	bst	r18, 0
     4c4:	80 f9       	bld	r24, 0
     4c6:	80 93 89 00 	sts	0x0089, r24

/******************************************************/
// send OK response from module
inline void TB_SendAckOK(void)
{
  TB_SendAck(100, 0);
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	ba 01       	movw	r22, r20
     4d0:	84 e6       	ldi	r24, 0x64	; 100
     4d2:	85 de       	rcall	.-758    	; 0x1de <TB_SendAck>
          }
          break;
        default:
          TB_SendAck(TB_ERR_TYPE, 0); // invalid value
      }
      return TB_CMD_SIO;
     4d4:	8e e0       	ldi	r24, 0x0E	; 14
     4d6:	9d c1       	rjmp	.+826    	; 0x812 <__stack+0x3b3>
            case 0:
              TB_out.b0 = (TB_Value != 0);
              TB_SendAckOK();
              break;
            case 1:
              TB_out.b1 = (TB_Value != 0);
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	67 2b       	or	r22, r23
     4dc:	68 2b       	or	r22, r24
     4de:	69 2b       	or	r22, r25
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <__stack+0x85>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	80 91 89 00 	lds	r24, 0x0089
     4e8:	20 fb       	bst	r18, 0
     4ea:	81 f9       	bld	r24, 1
     4ec:	80 93 89 00 	sts	0x0089, r24

/******************************************************/
// send OK response from module
inline void TB_SendAckOK(void)
{
  TB_SendAck(100, 0);
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	ba 01       	movw	r22, r20
     4f6:	84 e6       	ldi	r24, 0x64	; 100
     4f8:	72 de       	rcall	.-796    	; 0x1de <TB_SendAck>
          }
          break;
        default:
          TB_SendAck(TB_ERR_TYPE, 0); // invalid value
      }
      return TB_CMD_SIO;
     4fa:	8e e0       	ldi	r24, 0x0E	; 14
     4fc:	8a c1       	rjmp	.+788    	; 0x812 <__stack+0x3b3>
            case 1:
              TB_out.b1 = (TB_Value != 0);
              TB_SendAckOK();
              break;
            default:
              TB_SendAck(TB_ERR_TYPE, 0); // invalid value
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	ba 01       	movw	r22, r20
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	6b de       	rcall	.-810    	; 0x1de <TB_SendAck>
          }
          break;
        default:
          TB_SendAck(TB_ERR_TYPE, 0); // invalid value
      }
      return TB_CMD_SIO;
     508:	8e e0       	ldi	r24, 0x0E	; 14
              TB_out.b1 = (TB_Value != 0);
              TB_SendAckOK();
              break;
            default:
              TB_SendAck(TB_ERR_TYPE, 0); // invalid value
              break;
     50a:	83 c1       	rjmp	.+774    	; 0x812 <__stack+0x3b3>
          }
          break;
        default:
          TB_SendAck(TB_ERR_TYPE, 0); // invalid value
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	ba 01       	movw	r22, r20
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	64 de       	rcall	.-824    	; 0x1de <TB_SendAck>
      }
      return TB_CMD_SIO;
     516:	8e e0       	ldi	r24, 0x0E	; 14
     518:	7c c1       	rjmp	.+760    	; 0x812 <__stack+0x3b3>
      break;
    case TB_CMD_GIO:
      switch (TB_bufIn[TB_BUF_MOTOR]) {
     51a:	80 91 be 00 	lds	r24, 0x00BE
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	29 f0       	breq	.+10     	; 0x52c <__stack+0xcd>
     522:	30 f0       	brcs	.+12     	; 0x530 <__stack+0xd1>
     524:	82 30       	cpi	r24, 0x02	; 2
     526:	09 f4       	brne	.+2      	; 0x52a <__stack+0xcb>
     528:	41 c0       	rjmp	.+130    	; 0x5ac <__stack+0x14d>
     52a:	72 c1       	rjmp	.+740    	; 0x810 <__stack+0x3b1>
              break;
          }
          break;
        case 1: // analog inputs (2)
          //TB_SendAck(TB_ERR_VALUE, 0); // invalid value
          return TB_CMD_GIO;
     52c:	8f e0       	ldi	r24, 0x0F	; 15
     52e:	71 c1       	rjmp	.+738    	; 0x812 <__stack+0x3b3>
      return TB_CMD_SIO;
      break;
    case TB_CMD_GIO:
      switch (TB_bufIn[TB_BUF_MOTOR]) {
        case 0: // inputs (4)
          switch (TB_bufIn[TB_BUF_TYPE]) {
     530:	80 91 bd 00 	lds	r24, 0x00BD
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	81 f0       	breq	.+32     	; 0x558 <__stack+0xf9>
     538:	28 f0       	brcs	.+10     	; 0x544 <__stack+0xe5>
     53a:	82 30       	cpi	r24, 0x02	; 2
     53c:	c1 f0       	breq	.+48     	; 0x56e <__stack+0x10f>
     53e:	83 30       	cpi	r24, 0x03	; 3
     540:	11 f1       	breq	.+68     	; 0x586 <__stack+0x127>
     542:	2d c0       	rjmp	.+90     	; 0x59e <__stack+0x13f>
            case 0:
              TB_SendAck(TB_ERR_OK, TB_inp.b0);
     544:	40 91 b9 00 	lds	r20, 0x00B9
     548:	41 70       	andi	r20, 0x01	; 1
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	84 e6       	ldi	r24, 0x64	; 100
     552:	45 de       	rcall	.-886    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     554:	80 e0       	ldi	r24, 0x00	; 0
      switch (TB_bufIn[TB_BUF_MOTOR]) {
        case 0: // inputs (4)
          switch (TB_bufIn[TB_BUF_TYPE]) {
            case 0:
              TB_SendAck(TB_ERR_OK, TB_inp.b0);
              break;
     556:	5d c1       	rjmp	.+698    	; 0x812 <__stack+0x3b3>
            case 1:
              TB_SendAck(TB_ERR_OK, TB_inp.b1);
     558:	40 91 b9 00 	lds	r20, 0x00B9
     55c:	46 95       	lsr	r20
     55e:	41 70       	andi	r20, 0x01	; 1
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	84 e6       	ldi	r24, 0x64	; 100
     568:	3a de       	rcall	.-908    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     56a:	80 e0       	ldi	r24, 0x00	; 0
            case 0:
              TB_SendAck(TB_ERR_OK, TB_inp.b0);
              break;
            case 1:
              TB_SendAck(TB_ERR_OK, TB_inp.b1);
              break;
     56c:	52 c1       	rjmp	.+676    	; 0x812 <__stack+0x3b3>
            case 2:
              TB_SendAck(TB_ERR_OK, TB_inp.b2);
     56e:	40 91 b9 00 	lds	r20, 0x00B9
     572:	42 fb       	bst	r20, 2
     574:	44 27       	eor	r20, r20
     576:	40 f9       	bld	r20, 0
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	84 e6       	ldi	r24, 0x64	; 100
     580:	2e de       	rcall	.-932    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     582:	80 e0       	ldi	r24, 0x00	; 0
            case 1:
              TB_SendAck(TB_ERR_OK, TB_inp.b1);
              break;
            case 2:
              TB_SendAck(TB_ERR_OK, TB_inp.b2);
              break;
     584:	46 c1       	rjmp	.+652    	; 0x812 <__stack+0x3b3>
            case 3:
              TB_SendAck(TB_ERR_OK, TB_inp.b3);
     586:	40 91 b9 00 	lds	r20, 0x00B9
     58a:	43 fb       	bst	r20, 3
     58c:	44 27       	eor	r20, r20
     58e:	40 f9       	bld	r20, 0
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	84 e6       	ldi	r24, 0x64	; 100
     598:	22 de       	rcall	.-956    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     59a:	80 e0       	ldi	r24, 0x00	; 0
            case 2:
              TB_SendAck(TB_ERR_OK, TB_inp.b2);
              break;
            case 3:
              TB_SendAck(TB_ERR_OK, TB_inp.b3);
              break;
     59c:	3a c1       	rjmp	.+628    	; 0x812 <__stack+0x3b3>
            default:
              TB_SendAck(TB_ERR_VALUE, 0); // invalid value
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	ba 01       	movw	r22, r20
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	1b de       	rcall	.-970    	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     5a8:	80 e0       	ldi	r24, 0x00	; 0
            case 3:
              TB_SendAck(TB_ERR_OK, TB_inp.b3);
              break;
            default:
              TB_SendAck(TB_ERR_VALUE, 0); // invalid value
              break;
     5aa:	33 c1       	rjmp	.+614    	; 0x812 <__stack+0x3b3>
        case 1: // analog inputs (2)
          //TB_SendAck(TB_ERR_VALUE, 0); // invalid value
          return TB_CMD_GIO;
          break;
        case 2: // outputs (2);
          switch (TB_bufIn[TB_BUF_TYPE]) {
     5ac:	80 91 bd 00 	lds	r24, 0x00BD
     5b0:	88 23       	and	r24, r24
     5b2:	19 f0       	breq	.+6      	; 0x5ba <__stack+0x15b>
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	59 f0       	breq	.+22     	; 0x5ce <__stack+0x16f>
     5b8:	15 c0       	rjmp	.+42     	; 0x5e4 <__stack+0x185>
            case 0:
              TB_SendAck(TB_ERR_OK, TB_out.b0);
     5ba:	40 91 89 00 	lds	r20, 0x0089
     5be:	41 70       	andi	r20, 0x01	; 1
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	84 e6       	ldi	r24, 0x64	; 100
     5c8:	0a de       	rcall	.-1004   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
          break;
        case 2: // outputs (2);
          switch (TB_bufIn[TB_BUF_TYPE]) {
            case 0:
              TB_SendAck(TB_ERR_OK, TB_out.b0);
              break;
     5cc:	22 c1       	rjmp	.+580    	; 0x812 <__stack+0x3b3>
            case 1:
              TB_SendAck(TB_ERR_OK, TB_out.b1);
     5ce:	40 91 89 00 	lds	r20, 0x0089
     5d2:	46 95       	lsr	r20
     5d4:	41 70       	andi	r20, 0x01	; 1
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	84 e6       	ldi	r24, 0x64	; 100
     5de:	ff dd       	rcall	.-1026   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
            case 0:
              TB_SendAck(TB_ERR_OK, TB_out.b0);
              break;
            case 1:
              TB_SendAck(TB_ERR_OK, TB_out.b1);
              break;
     5e2:	17 c1       	rjmp	.+558    	; 0x812 <__stack+0x3b3>
            default:
              TB_SendAck(TB_ERR_VALUE, 0); // invalid value
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	ba 01       	movw	r22, r20
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	f8 dd       	rcall	.-1040   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
            case 1:
              TB_SendAck(TB_ERR_OK, TB_out.b1);
              break;
            default:
              TB_SendAck(TB_ERR_VALUE, 0); // invalid value
              break;
     5f0:	10 c1       	rjmp	.+544    	; 0x812 <__stack+0x3b3>
          }
          break;
      }
      break;
    case TB_CMD_RFS:
      return TB_CMD_RFS;
     5f2:	8d e0       	ldi	r24, 0x0D	; 13
     5f4:	0e c1       	rjmp	.+540    	; 0x812 <__stack+0x3b3>
      break;
    case TB_CMD_SGP:
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
     5f6:	20 91 be 00 	lds	r18, 0x00BE
     5fa:	22 23       	and	r18, r18
     5fc:	39 f0       	breq	.+14     	; 0x60c <__stack+0x1ad>
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	ba 01       	movw	r22, r20
     604:	84 e0       	ldi	r24, 0x04	; 4
     606:	eb dd       	rcall	.-1066   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	03 c1       	rjmp	.+518    	; 0x812 <__stack+0x3b3>
      break;
    case TB_CMD_SGP:
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
     60c:	20 91 bd 00 	lds	r18, 0x00BD
     610:	21 34       	cpi	r18, 0x41	; 65
     612:	41 f1       	breq	.+80     	; 0x664 <__stack+0x205>
     614:	18 f4       	brcc	.+6      	; 0x61c <__stack+0x1bd>
     616:	20 34       	cpi	r18, 0x40	; 64
     618:	41 f0       	breq	.+16     	; 0x62a <__stack+0x1cb>
     61a:	7e c0       	rjmp	.+252    	; 0x718 <__stack+0x2b9>
     61c:	22 34       	cpi	r18, 0x42	; 66
     61e:	09 f4       	brne	.+2      	; 0x622 <__stack+0x1c3>
     620:	3f c0       	rjmp	.+126    	; 0x6a0 <__stack+0x241>
     622:	2c 34       	cpi	r18, 0x4C	; 76
     624:	09 f4       	brne	.+2      	; 0x628 <__stack+0x1c9>
     626:	5a c0       	rjmp	.+180    	; 0x6dc <__stack+0x27d>
     628:	77 c0       	rjmp	.+238    	; 0x718 <__stack+0x2b9>
          case TB_GBPARAM_EEMAGIC:
            if (TB_Value != TB_gbparam.eemagic) {
     62a:	00 91 b4 00 	lds	r16, 0x00B4
     62e:	10 e0       	ldi	r17, 0x00	; 0
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	60 17       	cp	r22, r16
     636:	71 07       	cpc	r23, r17
     638:	82 07       	cpc	r24, r18
     63a:	93 07       	cpc	r25, r19
     63c:	61 f0       	breq	.+24     	; 0x656 <__stack+0x1f7>
              TB_gbparam.eemagic = TB_Value;
     63e:	60 93 b4 00 	sts	0x00B4, r22
              b = (void *) &(TB_gbparam.eemagic) - (void *) &(TB_gbparam);
     642:	19 82       	std	Y+1, r1	; 0x01
              eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.eemagic);
     644:	49 81       	ldd	r20, Y+1	; 0x01
     646:	20 91 c4 00 	lds	r18, 0x00C4
     64a:	30 91 c5 00 	lds	r19, 0x00C5
     64e:	c9 01       	movw	r24, r18
     650:	84 0f       	add	r24, r20
     652:	91 1d       	adc	r25, r1
     654:	3d d8       	rcall	.-3974   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
            }
            TB_SendAck(TB_ERR_OK, 0);
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	ba 01       	movw	r22, r20
     65c:	84 e6       	ldi	r24, 0x64	; 100
     65e:	bf dd       	rcall	.-1154   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     660:	80 e0       	ldi	r24, 0x00	; 0
              TB_gbparam.eemagic = TB_Value;
              b = (void *) &(TB_gbparam.eemagic) - (void *) &(TB_gbparam);
              eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.eemagic);
            }
            TB_SendAck(TB_ERR_OK, 0);
            break;
     662:	d7 c0       	rjmp	.+430    	; 0x812 <__stack+0x3b3>
          case TB_GBPARAM_BAUD:
            if (TB_Value != TB_gbparam.baud) {
     664:	00 91 b5 00 	lds	r16, 0x00B5
     668:	10 e0       	ldi	r17, 0x00	; 0
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	60 17       	cp	r22, r16
     670:	71 07       	cpc	r23, r17
     672:	82 07       	cpc	r24, r18
     674:	93 07       	cpc	r25, r19
     676:	69 f0       	breq	.+26     	; 0x692 <__stack+0x233>
              TB_gbparam.baud = TB_Value;
     678:	60 93 b5 00 	sts	0x00B5, r22
              b = (void *) &(TB_gbparam.baud) - (void *) &(TB_gbparam);
     67c:	21 e0       	ldi	r18, 0x01	; 1
     67e:	29 83       	std	Y+1, r18	; 0x01
              eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.baud);
     680:	49 81       	ldd	r20, Y+1	; 0x01
     682:	20 91 c4 00 	lds	r18, 0x00C4
     686:	30 91 c5 00 	lds	r19, 0x00C5
     68a:	c9 01       	movw	r24, r18
     68c:	84 0f       	add	r24, r20
     68e:	91 1d       	adc	r25, r1
     690:	1f d8       	rcall	.-4034   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
            }
            TB_SendAck(TB_ERR_OK, 0);
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	ba 01       	movw	r22, r20
     698:	84 e6       	ldi	r24, 0x64	; 100
     69a:	a1 dd       	rcall	.-1214   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     69c:	80 e0       	ldi	r24, 0x00	; 0
              TB_gbparam.baud = TB_Value;
              b = (void *) &(TB_gbparam.baud) - (void *) &(TB_gbparam);
              eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.baud);
            }
            TB_SendAck(TB_ERR_OK, 0);
            break;
     69e:	b9 c0       	rjmp	.+370    	; 0x812 <__stack+0x3b3>
          case TB_GBPARAM_ADDRESS:
            if (TB_Value != TB_gbparam.address) {
     6a0:	00 91 b6 00 	lds	r16, 0x00B6
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	60 17       	cp	r22, r16
     6ac:	71 07       	cpc	r23, r17
     6ae:	82 07       	cpc	r24, r18
     6b0:	93 07       	cpc	r25, r19
     6b2:	69 f0       	breq	.+26     	; 0x6ce <__stack+0x26f>
              TB_gbparam.address = TB_Value;
     6b4:	60 93 b6 00 	sts	0x00B6, r22
              b = (void *) &(TB_gbparam.address) - (void *) &(TB_gbparam);
     6b8:	22 e0       	ldi	r18, 0x02	; 2
     6ba:	29 83       	std	Y+1, r18	; 0x01
              eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.address);
     6bc:	49 81       	ldd	r20, Y+1	; 0x01
     6be:	20 91 c4 00 	lds	r18, 0x00C4
     6c2:	30 91 c5 00 	lds	r19, 0x00C5
     6c6:	c9 01       	movw	r24, r18
     6c8:	84 0f       	add	r24, r20
     6ca:	91 1d       	adc	r25, r1
     6cc:	01 d8       	rcall	.-4094   	; 0xfffff6d0 <__eeprom_end+0xff7ef6d0>
            }
            TB_SendAck(TB_ERR_OK, 0);
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	ba 01       	movw	r22, r20
     6d4:	84 e6       	ldi	r24, 0x64	; 100
     6d6:	83 dd       	rcall	.-1274   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
              TB_gbparam.address = TB_Value;
              b = (void *) &(TB_gbparam.address) - (void *) &(TB_gbparam);
              eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.address);
            }
            TB_SendAck(TB_ERR_OK, 0);
            break;
     6da:	9b c0       	rjmp	.+310    	; 0x812 <__stack+0x3b3>
          case TB_GBPARAM_HOST_ADDR:
            if (TB_Value != TB_gbparam.host_address) {
     6dc:	00 91 b8 00 	lds	r16, 0x00B8
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	60 17       	cp	r22, r16
     6e8:	71 07       	cpc	r23, r17
     6ea:	82 07       	cpc	r24, r18
     6ec:	93 07       	cpc	r25, r19
     6ee:	69 f0       	breq	.+26     	; 0x70a <__stack+0x2ab>
              TB_gbparam.host_address = TB_Value;
     6f0:	60 93 b8 00 	sts	0x00B8, r22
              b = (void *) &(TB_gbparam.host_address) - (void *) &(TB_gbparam);
     6f4:	24 e0       	ldi	r18, 0x04	; 4
     6f6:	29 83       	std	Y+1, r18	; 0x01
              eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.host_address);
     6f8:	49 81       	ldd	r20, Y+1	; 0x01
     6fa:	20 91 c4 00 	lds	r18, 0x00C4
     6fe:	30 91 c5 00 	lds	r19, 0x00C5
     702:	c9 01       	movw	r24, r18
     704:	84 0f       	add	r24, r20
     706:	91 1d       	adc	r25, r1
     708:	e3 d7       	rcall	.+4038   	; 0x16d0 <__eeupd_byte_m8>
            }
            TB_SendAck(TB_ERR_OK, 0);
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	ba 01       	movw	r22, r20
     710:	84 e6       	ldi	r24, 0x64	; 100
     712:	65 dd       	rcall	.-1334   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     714:	80 e0       	ldi	r24, 0x00	; 0
              TB_gbparam.host_address = TB_Value;
              b = (void *) &(TB_gbparam.host_address) - (void *) &(TB_gbparam);
              eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.host_address);
            }
            TB_SendAck(TB_ERR_OK, 0);
            break;
     716:	7d c0       	rjmp	.+250    	; 0x812 <__stack+0x3b3>
          default:
            TB_SendAck(TB_ERR_VALUE, 0); // invalid value
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	ba 01       	movw	r22, r20
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	5e dd       	rcall	.-1348   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     722:	80 e0       	ldi	r24, 0x00	; 0
            }
            TB_SendAck(TB_ERR_OK, 0);
            break;
          default:
            TB_SendAck(TB_ERR_VALUE, 0); // invalid value
            break;
     724:	76 c0       	rjmp	.+236    	; 0x812 <__stack+0x3b3>
        }
      }
      break;
    case TB_CMD_GGP:
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
     726:	80 91 be 00 	lds	r24, 0x00BE
     72a:	88 23       	and	r24, r24
     72c:	39 f0       	breq	.+14     	; 0x73c <__stack+0x2dd>
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	ba 01       	movw	r22, r20
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	53 dd       	rcall	.-1370   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	6b c0       	rjmp	.+214    	; 0x812 <__stack+0x3b3>
      break;
    case TB_CMD_GGP:
      if (TB_bufIn[TB_BUF_MOTOR] != 0) {
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
     73c:	80 91 bd 00 	lds	r24, 0x00BD
     740:	81 34       	cpi	r24, 0x41	; 65
     742:	49 f0       	breq	.+18     	; 0x756 <__stack+0x2f7>
     744:	18 f4       	brcc	.+6      	; 0x74c <__stack+0x2ed>
     746:	80 34       	cpi	r24, 0x40	; 64
     748:	09 f1       	breq	.+66     	; 0x78c <__stack+0x32d>
     74a:	29 c0       	rjmp	.+82     	; 0x79e <__stack+0x33f>
     74c:	82 34       	cpi	r24, 0x42	; 66
     74e:	61 f0       	breq	.+24     	; 0x768 <__stack+0x309>
     750:	8c 34       	cpi	r24, 0x4C	; 76
     752:	99 f0       	breq	.+38     	; 0x77a <__stack+0x31b>
     754:	24 c0       	rjmp	.+72     	; 0x79e <__stack+0x33f>
          case TB_GBPARAM_BAUD:
            TB_SendAck(TB_ERR_OK, TB_gbparam.baud);
     756:	40 91 b5 00 	lds	r20, 0x00B5
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	84 e6       	ldi	r24, 0x64	; 100
     762:	3d dd       	rcall	.-1414   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     764:	80 e0       	ldi	r24, 0x00	; 0
        TB_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB_bufIn[TB_BUF_TYPE]) {
          case TB_GBPARAM_BAUD:
            TB_SendAck(TB_ERR_OK, TB_gbparam.baud);
            break;
     766:	55 c0       	rjmp	.+170    	; 0x812 <__stack+0x3b3>
          case TB_GBPARAM_ADDRESS:
            TB_SendAck(TB_ERR_OK, TB_gbparam.address);
     768:	40 91 b6 00 	lds	r20, 0x00B6
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	84 e6       	ldi	r24, 0x64	; 100
     774:	34 dd       	rcall	.-1432   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     776:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_BAUD:
            TB_SendAck(TB_ERR_OK, TB_gbparam.baud);
            break;
          case TB_GBPARAM_ADDRESS:
            TB_SendAck(TB_ERR_OK, TB_gbparam.address);
            break;
     778:	4c c0       	rjmp	.+152    	; 0x812 <__stack+0x3b3>
          case TB_GBPARAM_HOST_ADDR:
            TB_SendAck(TB_ERR_OK, TB_gbparam.host_address);
     77a:	40 91 b8 00 	lds	r20, 0x00B8
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	84 e6       	ldi	r24, 0x64	; 100
     786:	2b dd       	rcall	.-1450   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     788:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_ADDRESS:
            TB_SendAck(TB_ERR_OK, TB_gbparam.address);
            break;
          case TB_GBPARAM_HOST_ADDR:
            TB_SendAck(TB_ERR_OK, TB_gbparam.host_address);
            break;
     78a:	43 c0       	rjmp	.+134    	; 0x812 <__stack+0x3b3>
          case TB_GBPARAM_EEMAGIC:
            TB_SendAck(TB_ERR_OK, TB_gbparam.eemagic);
     78c:	40 91 b4 00 	lds	r20, 0x00B4
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	84 e6       	ldi	r24, 0x64	; 100
     798:	22 dd       	rcall	.-1468   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     79a:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_HOST_ADDR:
            TB_SendAck(TB_ERR_OK, TB_gbparam.host_address);
            break;
          case TB_GBPARAM_EEMAGIC:
            TB_SendAck(TB_ERR_OK, TB_gbparam.eemagic);
            break;
     79c:	3a c0       	rjmp	.+116    	; 0x812 <__stack+0x3b3>
          default:
            TB_SendAck(TB_ERR_VALUE, 0); // invalid value
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	ba 01       	movw	r22, r20
     7a4:	84 e0       	ldi	r24, 0x04	; 4
     7a6:	1b dd       	rcall	.-1482   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_EEMAGIC:
            TB_SendAck(TB_ERR_OK, TB_gbparam.eemagic);
            break;
          default:
            TB_SendAck(TB_ERR_VALUE, 0); // invalid value
            break;
     7aa:	33 c0       	rjmp	.+102    	; 0x812 <__stack+0x3b3>
        }
      }
      break;
    case 136: // get module version
      if (TB_bufIn[TB_BUF_TYPE] == 0) {
     7ac:	80 91 bd 00 	lds	r24, 0x00BD
     7b0:	81 11       	cpse	r24, r1
     7b2:	1b c0       	rjmp	.+54     	; 0x7ea <__stack+0x38b>
        // text mode
        TB_bufOut[0] = TB_AddrReply;
     7b4:	80 91 c6 00 	lds	r24, 0x00C6
     7b8:	80 93 ab 00 	sts	0x00AB, r24
        TB_bufOut[1] = '1';
     7bc:	81 e3       	ldi	r24, 0x31	; 49
     7be:	80 93 ac 00 	sts	0x00AC, r24
        TB_bufOut[2] = '0';
     7c2:	90 e3       	ldi	r25, 0x30	; 48
     7c4:	90 93 ad 00 	sts	0x00AD, r25
        TB_bufOut[3] = '2';
     7c8:	22 e3       	ldi	r18, 0x32	; 50
     7ca:	20 93 ae 00 	sts	0x00AE, r18
        TB_bufOut[4] = '1';
     7ce:	80 93 af 00 	sts	0x00AF, r24
        TB_bufOut[5] = 'V';
     7d2:	36 e5       	ldi	r19, 0x56	; 86
     7d4:	30 93 b0 00 	sts	0x00B0, r19
        TB_bufOut[6] = '1';
     7d8:	80 93 b1 00 	sts	0x00B1, r24
        TB_bufOut[7] = '2';
     7dc:	20 93 b2 00 	sts	0x00B2, r18
        TB_bufOut[8] = '0';
     7e0:	90 93 b3 00 	sts	0x00B3, r25
        TB_Send();
     7e4:	ae dc       	rcall	.-1700   	; 0x142 <TB_Send>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	14 c0       	rjmp	.+40     	; 0x812 <__stack+0x3b3>
        TB_bufOut[7] = '2';
        TB_bufOut[8] = '0';
        TB_Send();
       } else {
        // binary mode
        TB_SendAck(TB_ERR_OK, (0x10203040));
     7ea:	40 e4       	ldi	r20, 0x40	; 64
     7ec:	50 e3       	ldi	r21, 0x30	; 48
     7ee:	60 e2       	ldi	r22, 0x20	; 32
     7f0:	70 e1       	ldi	r23, 0x10	; 16
     7f2:	84 e6       	ldi	r24, 0x64	; 100
     7f4:	f4 dc       	rcall	.-1560   	; 0x1de <TB_SendAck>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0c c0       	rjmp	.+24     	; 0x812 <__stack+0x3b3>
        // binary mode
        TB_SendAck(TB_ERR_OK, (0x10203040));
      };
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	ba 01       	movw	r22, r20
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	ed dc       	rcall	.-1574   	; 0x1de <TB_SendAck>
      return 0;
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	05 c0       	rjmp	.+10     	; 0x812 <__stack+0x3b3>
    case TB_CMD_ROL:
      TB_SendAck(TB_ERR_OK, 0);
      return TB_CMD_ROL;
      break;
    case TB_CMD_MVP:
      return TB_CMD_MVP;
     808:	84 e0       	ldi	r24, 0x04	; 4
     80a:	03 c0       	rjmp	.+6      	; 0x812 <__stack+0x3b3>
            TB_SendAck(TB_ERR_TYPE, 0); // invalid value
          #endif
          break;
        case 1:
          #ifdef TB_SIO_BANK_1_IMPLEMENTED
            return TB_CMD_SIO;
     80c:	8e e0       	ldi	r24, 0x0E	; 14
     80e:	01 c0       	rjmp	.+2      	; 0x812 <__stack+0x3b3>
      break;
    default:
      TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     810:	80 e0       	ldi	r24, 0x00	; 0
}
     812:	0f 90       	pop	r0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <TB2_Send>:
/******************************************************/
// private functions
/******************************************************/
void TB2_Send(void)
{
  if (TB2_Callback_TX != NULL) TB2_Callback_TX();
     81e:	e0 91 67 00 	lds	r30, 0x0067
     822:	f0 91 68 00 	lds	r31, 0x0068
     826:	30 97       	sbiw	r30, 0x00	; 0
     828:	09 f0       	breq	.+2      	; 0x82c <TB2_Send+0xe>
     82a:	09 95       	icall
     82c:	08 95       	ret

0000082e <TB2_calcSum>:
}


/******************************************************/
void TB2_calcSum(void)
{
     82e:	e0 ef       	ldi	r30, 0xF0	; 240
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	88 ef       	ldi	r24, 0xF8	; 248
     834:	90 e0       	ldi	r25, 0x00	; 0
  byte i, sum;
  sum = 0;
     836:	20 e0       	ldi	r18, 0x00	; 0
  for(i=0; i<8; i++) {
    sum += TB2_bufOut[i];
     838:	31 91       	ld	r19, Z+
     83a:	23 0f       	add	r18, r19
/******************************************************/
void TB2_calcSum(void)
{
  byte i, sum;
  sum = 0;
  for(i=0; i<8; i++) {
     83c:	e8 17       	cp	r30, r24
     83e:	f9 07       	cpc	r31, r25
     840:	d9 f7       	brne	.-10     	; 0x838 <TB2_calcSum+0xa>
    sum += TB2_bufOut[i];
  }
  TB2_bufOut[TB_BUF_SUM] = sum;
     842:	20 93 f8 00 	sts	0x00F8, r18
     846:	08 95       	ret

00000848 <TB2_Init>:
/******************************************************/
// public functions
/******************************************************/
// initialize
void TB2_Init(void * setting_in_eeprom)
{
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
  addr_setting_in_eeprom2 = setting_in_eeprom;
     84e:	90 93 04 01 	sts	0x0104, r25
     852:	80 93 03 01 	sts	0x0103, r24
  //                 DST,   SRC, size
  eeprom_read_block((void *) &TB2_gbparam, setting_in_eeprom, sizeof(struct TB_GBPARAM));
     856:	45 e0       	ldi	r20, 0x05	; 5
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	bc 01       	movw	r22, r24
     85c:	8d ec       	ldi	r24, 0xCD	; 205
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	27 d7       	rcall	.+3662   	; 0x16b0 <__eerd_block_m8>
  if (TB2_gbparam.eemagic != 66) {
     862:	80 91 cd 00 	lds	r24, 0x00CD
     866:	82 34       	cpi	r24, 0x42	; 66
     868:	99 f0       	breq	.+38     	; 0x890 <TB2_Init+0x48>
    // not valid data in eeprom
    TB2_gbparam.eemagic = 66;
     86a:	82 e4       	ldi	r24, 0x42	; 66
     86c:	80 93 cd 00 	sts	0x00CD, r24
    TB2_gbparam.baud = 4;
     870:	84 e0       	ldi	r24, 0x04	; 4
     872:	80 93 ce 00 	sts	0x00CE, r24
    TB2_gbparam.address = 4;
     876:	80 93 cf 00 	sts	0x00CF, r24
    TB2_gbparam.telegram_pause_time = 0;
     87a:	10 92 d0 00 	sts	0x00D0, r1
    TB2_gbparam.host_address = 2;
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	80 93 d1 00 	sts	0x00D1, r24
    // save default setting to eeprom
    eeprom_write_block((void *) &TB2_gbparam, setting_in_eeprom, sizeof(struct TB_GBPARAM));
     884:	45 e0       	ldi	r20, 0x05	; 5
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	be 01       	movw	r22, r28
     88a:	8d ec       	ldi	r24, 0xCD	; 205
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	31 d7       	rcall	.+3682   	; 0x16f2 <__eewr_block_m8>
  }
  // ted mame funkèni konfiguraci naètenou

  // zvolíme správnou komunikaèní rychlost:
  if (TB2_Callback_setBaud != NULL) TB2_Callback_setBaud(TB_gbparam.baud);
     890:	e0 91 65 00 	lds	r30, 0x0065
     894:	f0 91 66 00 	lds	r31, 0x0066
     898:	30 97       	sbiw	r30, 0x00	; 0
     89a:	19 f0       	breq	.+6      	; 0x8a2 <TB2_Init+0x5a>
     89c:	80 91 b5 00 	lds	r24, 0x00B5
     8a0:	09 95       	icall

  // poznaèíme si adresy
  TB2_AddrReply = TB2_gbparam.host_address;
     8a2:	80 91 d1 00 	lds	r24, 0x00D1
     8a6:	80 93 d2 00 	sts	0x00D2, r24
  TB2_AddrModule= TB2_gbparam.address;
     8aa:	80 91 cf 00 	lds	r24, 0x00CF
     8ae:	80 93 c7 00 	sts	0x00C7, r24
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <TB2_SendAck>:

/******************************************************/
// send response from module
void TB2_SendAck(byte status, long int value)
{
  TB2_bufOut[0] = TB2_AddrReply;
     8b8:	90 91 d2 00 	lds	r25, 0x00D2
     8bc:	90 93 f0 00 	sts	0x00F0, r25
  TB2_bufOut[1] = TB2_AddrModule;
     8c0:	90 91 c7 00 	lds	r25, 0x00C7
     8c4:	90 93 f1 00 	sts	0x00F1, r25
  TB2_bufOut[2] = status;
     8c8:	80 93 f2 00 	sts	0x00F2, r24
  TB2_bufOut[3] = TB2_bufIn[TB_BUF_COMMAND]; //command;
     8cc:	80 91 fa 00 	lds	r24, 0x00FA
     8d0:	80 93 f3 00 	sts	0x00F3, r24
  TB2_bufOut[4] = value >> 24;
     8d4:	70 93 f4 00 	sts	0x00F4, r23
  TB2_bufOut[5] = value >> 16;
     8d8:	60 93 f5 00 	sts	0x00F5, r22
  TB2_bufOut[6] = value >> 8;
     8dc:	50 93 f6 00 	sts	0x00F6, r21
  TB2_bufOut[7] = value >> 0;
     8e0:	40 93 f7 00 	sts	0x00F7, r20
  TB2_calcSum();
     8e4:	a4 df       	rcall	.-184    	; 0x82e <TB2_calcSum>
  TB2_Send();
     8e6:	9b df       	rcall	.-202    	; 0x81e <TB2_Send>
     8e8:	08 95       	ret

000008ea <TB2_Read>:
{
  byte i;
  byte sum;

  // check address
  if (TB2_bufIn[TB_BUF_ADDRESS] != TB2_AddrModule) return 2;
     8ea:	90 91 f9 00 	lds	r25, 0x00F9
     8ee:	80 91 c7 00 	lds	r24, 0x00C7
     8f2:	98 13       	cpse	r25, r24
     8f4:	15 c0       	rjmp	.+42     	; 0x920 <TB2_Read+0x36>
     8f6:	e9 ef       	ldi	r30, 0xF9	; 249
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	20 e0       	ldi	r18, 0x00	; 0
  
  // check SUM byte
  sum = 0;
  for( i=0; i<8; i++) {
    sum += TB2_bufIn[i];
     900:	31 91       	ld	r19, Z+
     902:	23 0f       	add	r18, r19
  // check address
  if (TB2_bufIn[TB_BUF_ADDRESS] != TB2_AddrModule) return 2;
  
  // check SUM byte
  sum = 0;
  for( i=0; i<8; i++) {
     904:	e8 17       	cp	r30, r24
     906:	f9 07       	cpc	r31, r25
     908:	d9 f7       	brne	.-10     	; 0x900 <TB2_Read+0x16>
    sum += TB2_bufIn[i];
  }
  if (sum != TB2_bufIn[TB_BUF_SUM]) {
     90a:	80 91 01 01 	lds	r24, 0x0101
     90e:	28 17       	cp	r18, r24
     910:	49 f0       	breq	.+18     	; 0x924 <TB2_Read+0x3a>
    TB2_SendAck(1, 0); // wrong checksum
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	ba 01       	movw	r22, r20
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	ce df       	rcall	.-100    	; 0x8b8 <TB2_SendAck>
    return 3; // bad checksum
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	08 95       	ret
{
  byte i;
  byte sum;

  // check address
  if (TB2_bufIn[TB_BUF_ADDRESS] != TB2_AddrModule) return 2;
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	08 95       	ret
    TB2_SendAck(1, 0); // wrong checksum
    return 3; // bad checksum
  }

  // we have valid data in TB2_bufIn
  return 0;
     924:	80 e0       	ldi	r24, 0x00	; 0
}
     926:	08 95       	ret

00000928 <TB2_Decode>:

/******************************************************/
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB2_Decode(void)
{
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	1f 92       	push	r1
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
  volatile byte b;
  TB2_Value = (((int32_t) TB2_bufIn[4]) << 24) |
     936:	20 91 fd 00 	lds	r18, 0x00FD
             (((int32_t) TB2_bufIn[5]) << 16) |
     93a:	60 91 fe 00 	lds	r22, 0x00FE
     93e:	86 2f       	mov	r24, r22
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	dc 01       	movw	r26, r24
     948:	99 27       	eor	r25, r25
     94a:	88 27       	eor	r24, r24
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB2_Decode(void)
{
  volatile byte b;
  TB2_Value = (((int32_t) TB2_bufIn[4]) << 24) |
     94c:	b2 2b       	or	r27, r18
             (((int32_t) TB2_bufIn[5]) << 16) |
             (((int32_t) TB2_bufIn[6]) <<  8) |
             (((int32_t) TB2_bufIn[7])      ) ;
     94e:	20 91 00 01 	lds	r18, 0x0100
// return = unhandled command number, 0=handled or unknown
byte TB2_Decode(void)
{
  volatile byte b;
  TB2_Value = (((int32_t) TB2_bufIn[4]) << 24) |
             (((int32_t) TB2_bufIn[5]) << 16) |
     952:	82 2b       	or	r24, r18
             (((int32_t) TB2_bufIn[6]) <<  8) |
     954:	20 91 ff 00 	lds	r18, 0x00FF
     958:	bc 01       	movw	r22, r24
     95a:	cd 01       	movw	r24, r26
     95c:	72 2b       	or	r23, r18
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB2_Decode(void)
{
  volatile byte b;
  TB2_Value = (((int32_t) TB2_bufIn[4]) << 24) |
     95e:	60 93 c9 00 	sts	0x00C9, r22
     962:	70 93 ca 00 	sts	0x00CA, r23
     966:	80 93 cb 00 	sts	0x00CB, r24
     96a:	90 93 cc 00 	sts	0x00CC, r25
             (((int32_t) TB2_bufIn[5]) << 16) |
             (((int32_t) TB2_bufIn[6]) <<  8) |
             (((int32_t) TB2_bufIn[7])      ) ;

  switch (TB2_bufIn[TB_BUF_COMMAND]) {
     96e:	20 91 fa 00 	lds	r18, 0x00FA
     972:	29 30       	cpi	r18, 0x09	; 9
     974:	09 f4       	brne	.+2      	; 0x978 <TB2_Decode+0x50>
     976:	b2 c1       	rjmp	.+868    	; 0xcdc <TB2_Decode+0x3b4>
     978:	78 f4       	brcc	.+30     	; 0x998 <TB2_Decode+0x70>
     97a:	24 30       	cpi	r18, 0x04	; 4
     97c:	09 f4       	brne	.+2      	; 0x980 <TB2_Decode+0x58>
     97e:	b7 c2       	rjmp	.+1390   	; 0xeee <TB2_Decode+0x5c6>
     980:	28 f4       	brcc	.+10     	; 0x98c <TB2_Decode+0x64>
     982:	21 30       	cpi	r18, 0x01	; 1
     984:	f9 f0       	breq	.+62     	; 0x9c4 <TB2_Decode+0x9c>
     986:	22 30       	cpi	r18, 0x02	; 2
     988:	21 f1       	breq	.+72     	; 0x9d2 <TB2_Decode+0xaa>
     98a:	aa c2       	rjmp	.+1364   	; 0xee0 <TB2_Decode+0x5b8>
     98c:	25 30       	cpi	r18, 0x05	; 5
     98e:	41 f1       	breq	.+80     	; 0x9e0 <TB2_Decode+0xb8>
     990:	26 30       	cpi	r18, 0x06	; 6
     992:	09 f4       	brne	.+2      	; 0x996 <TB2_Decode+0x6e>
     994:	6c c0       	rjmp	.+216    	; 0xa6e <TB2_Decode+0x146>
     996:	a4 c2       	rjmp	.+1352   	; 0xee0 <TB2_Decode+0x5b8>
     998:	2e 30       	cpi	r18, 0x0E	; 14
     99a:	09 f4       	brne	.+2      	; 0x99e <TB2_Decode+0x76>
     99c:	e0 c0       	rjmp	.+448    	; 0xb5e <TB2_Decode+0x236>
     99e:	38 f4       	brcc	.+14     	; 0x9ae <TB2_Decode+0x86>
     9a0:	2a 30       	cpi	r18, 0x0A	; 10
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <TB2_Decode+0x7e>
     9a4:	33 c2       	rjmp	.+1126   	; 0xe0c <TB2_Decode+0x4e4>
     9a6:	2d 30       	cpi	r18, 0x0D	; 13
     9a8:	09 f4       	brne	.+2      	; 0x9ac <TB2_Decode+0x84>
     9aa:	96 c1       	rjmp	.+812    	; 0xcd8 <TB2_Decode+0x3b0>
     9ac:	99 c2       	rjmp	.+1330   	; 0xee0 <TB2_Decode+0x5b8>
     9ae:	28 38       	cpi	r18, 0x88	; 136
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <TB2_Decode+0x8c>
     9b2:	6f c2       	rjmp	.+1246   	; 0xe92 <TB2_Decode+0x56a>
     9b4:	2e 3f       	cpi	r18, 0xFE	; 254
     9b6:	21 f0       	breq	.+8      	; 0x9c0 <TB2_Decode+0x98>
     9b8:	2f 30       	cpi	r18, 0x0F	; 15
     9ba:	09 f0       	breq	.+2      	; 0x9be <TB2_Decode+0x96>
     9bc:	91 c2       	rjmp	.+1314   	; 0xee0 <TB2_Decode+0x5b8>
     9be:	20 c1       	rjmp	.+576    	; 0xc00 <TB2_Decode+0x2d8>
    case TB_CMD_DEBUG:
      return TB_CMD_DEBUG;
     9c0:	8e ef       	ldi	r24, 0xFE	; 254
     9c2:	98 c2       	rjmp	.+1328   	; 0xef4 <TB2_Decode+0x5cc>
      break;
    case TB_CMD_ROR:
      TB2_SendAck(TB_ERR_OK, 0);
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	ba 01       	movw	r22, r20
     9ca:	84 e6       	ldi	r24, 0x64	; 100
     9cc:	75 df       	rcall	.-278    	; 0x8b8 <TB2_SendAck>
      return TB_CMD_ROR;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	91 c2       	rjmp	.+1314   	; 0xef4 <TB2_Decode+0x5cc>
      break;
    case TB_CMD_ROL:
      TB2_SendAck(TB_ERR_OK, 0);
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	ba 01       	movw	r22, r20
     9d8:	84 e6       	ldi	r24, 0x64	; 100
     9da:	6e df       	rcall	.-292    	; 0x8b8 <TB2_SendAck>
      return TB_CMD_ROL;
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	8a c2       	rjmp	.+1300   	; 0xef4 <TB2_Decode+0x5cc>
      break;
    case TB_CMD_MVP:
      return TB_CMD_MVP;
      break;
    case TB_CMD_SAP: // set axis parameter
      if (TB2_bufIn[TB_BUF_MOTOR] != 0) {
     9e0:	20 91 fc 00 	lds	r18, 0x00FC
     9e4:	22 23       	and	r18, r18
     9e6:	39 f0       	breq	.+14     	; 0x9f6 <TB2_Decode+0xce>
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	ba 01       	movw	r22, r20
     9ee:	84 e0       	ldi	r24, 0x04	; 4
     9f0:	63 df       	rcall	.-314    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	7f c2       	rjmp	.+1278   	; 0xef4 <TB2_Decode+0x5cc>
      break;
    case TB_CMD_SAP: // set axis parameter
      if (TB2_bufIn[TB_BUF_MOTOR] != 0) {
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB2_bufIn[TB_BUF_TYPE]) {
     9f6:	20 91 fb 00 	lds	r18, 0x00FB
     9fa:	26 30       	cpi	r18, 0x06	; 6
     9fc:	e9 f0       	breq	.+58     	; 0xa38 <TB2_Decode+0x110>
     9fe:	28 f4       	brcc	.+10     	; 0xa0a <TB2_Decode+0xe2>
     a00:	24 30       	cpi	r18, 0x04	; 4
     a02:	41 f0       	breq	.+16     	; 0xa14 <TB2_Decode+0xec>
     a04:	25 30       	cpi	r18, 0x05	; 5
     a06:	79 f0       	breq	.+30     	; 0xa26 <TB2_Decode+0xfe>
     a08:	2b c0       	rjmp	.+86     	; 0xa60 <TB2_Decode+0x138>
     a0a:	27 30       	cpi	r18, 0x07	; 7
     a0c:	f1 f0       	breq	.+60     	; 0xa4a <TB2_Decode+0x122>
     a0e:	2c 38       	cpi	r18, 0x8C	; 140
     a10:	29 f1       	breq	.+74     	; 0xa5c <TB2_Decode+0x134>
     a12:	26 c0       	rjmp	.+76     	; 0xa60 <TB2_Decode+0x138>
          case TB_PARAM_SPEED:
            TB2_param.speed = TB2_Value;
     a14:	60 93 db 00 	sts	0x00DB, r22
     a18:	70 93 dc 00 	sts	0x00DC, r23
     a1c:	80 93 dd 00 	sts	0x00DD, r24
     a20:	90 93 de 00 	sts	0x00DE, r25
            break;
     a24:	1d c0       	rjmp	.+58     	; 0xa60 <TB2_Decode+0x138>
          case TB_PARAM_ACCELERATION:
            TB2_param.acceleration = TB2_Value;
     a26:	60 93 df 00 	sts	0x00DF, r22
     a2a:	70 93 e0 00 	sts	0x00E0, r23
     a2e:	80 93 e1 00 	sts	0x00E1, r24
     a32:	90 93 e2 00 	sts	0x00E2, r25
            break;
     a36:	14 c0       	rjmp	.+40     	; 0xa60 <TB2_Decode+0x138>
          case TB_PARAM_CURRENT_RUN:
            TB2_param.current = TB2_Value;
     a38:	60 93 e3 00 	sts	0x00E3, r22
     a3c:	70 93 e4 00 	sts	0x00E4, r23
     a40:	80 93 e5 00 	sts	0x00E5, r24
     a44:	90 93 e6 00 	sts	0x00E6, r25
            break;
     a48:	0b c0       	rjmp	.+22     	; 0xa60 <TB2_Decode+0x138>
          case TB_PARAM_CURRENT_HOLD:
            TB2_param.current_hold = TB2_Value;
     a4a:	60 93 e7 00 	sts	0x00E7, r22
     a4e:	70 93 e8 00 	sts	0x00E8, r23
     a52:	80 93 e9 00 	sts	0x00E9, r24
     a56:	90 93 ea 00 	sts	0x00EA, r25
            break;
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <TB2_Decode+0x138>
          case TB_PARAM_RESOLUTION:
            TB2_param.resolution = TB2_Value;
     a5c:	60 93 eb 00 	sts	0x00EB, r22

/******************************************************/
// send OK response from module
inline void TB2_SendAckOK(void)
{
  TB2_SendAck(100, 0);
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	ba 01       	movw	r22, r20
     a66:	84 e6       	ldi	r24, 0x64	; 100
     a68:	27 df       	rcall	.-434    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	43 c2       	rjmp	.+1158   	; 0xef4 <TB2_Decode+0x5cc>
        }
        TB2_SendAckOK();
      }
      break;
    case TB_CMD_GAP: // get axis parameter
      if (TB2_bufIn[TB_BUF_MOTOR] != 0) {
     a6e:	80 91 fc 00 	lds	r24, 0x00FC
     a72:	88 23       	and	r24, r24
     a74:	39 f0       	breq	.+14     	; 0xa84 <TB2_Decode+0x15c>
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	ba 01       	movw	r22, r20
     a7c:	84 e0       	ldi	r24, 0x04	; 4
     a7e:	1c df       	rcall	.-456    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	38 c2       	rjmp	.+1136   	; 0xef4 <TB2_Decode+0x5cc>
      break;
    case TB_CMD_GAP: // get axis parameter
      if (TB2_bufIn[TB_BUF_MOTOR] != 0) {
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB2_bufIn[TB_BUF_TYPE]) {
     a84:	80 91 fb 00 	lds	r24, 0x00FB
     a88:	86 30       	cpi	r24, 0x06	; 6
     a8a:	49 f1       	breq	.+82     	; 0xade <TB2_Decode+0x1b6>
     a8c:	30 f4       	brcc	.+12     	; 0xa9a <TB2_Decode+0x172>
     a8e:	84 30       	cpi	r24, 0x04	; 4
     a90:	f1 f1       	breq	.+124    	; 0xb0e <TB2_Decode+0x1e6>
     a92:	c8 f4       	brcc	.+50     	; 0xac6 <TB2_Decode+0x19e>
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	59 f0       	breq	.+22     	; 0xaae <TB2_Decode+0x186>
     a98:	5b c0       	rjmp	.+182    	; 0xb50 <TB2_Decode+0x228>
     a9a:	8c 38       	cpi	r24, 0x8C	; 140
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <TB2_Decode+0x178>
     a9e:	43 c0       	rjmp	.+134    	; 0xb26 <TB2_Decode+0x1fe>
     aa0:	84 3c       	cpi	r24, 0xC4	; 196
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <TB2_Decode+0x17e>
     aa4:	49 c0       	rjmp	.+146    	; 0xb38 <TB2_Decode+0x210>
     aa6:	87 30       	cpi	r24, 0x07	; 7
     aa8:	09 f0       	breq	.+2      	; 0xaac <TB2_Decode+0x184>
     aaa:	52 c0       	rjmp	.+164    	; 0xb50 <TB2_Decode+0x228>
     aac:	24 c0       	rjmp	.+72     	; 0xaf6 <TB2_Decode+0x1ce>
          case TB_PARAM_ACTUAL_POSITION:
            TB2_SendAck(TB_ERR_OK, TB2_param.actual_position);
     aae:	40 91 d7 00 	lds	r20, 0x00D7
     ab2:	50 91 d8 00 	lds	r21, 0x00D8
     ab6:	60 91 d9 00 	lds	r22, 0x00D9
     aba:	70 91 da 00 	lds	r23, 0x00DA
     abe:	84 e6       	ldi	r24, 0x64	; 100
     ac0:	fb de       	rcall	.-522    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB2_bufIn[TB_BUF_TYPE]) {
          case TB_PARAM_ACTUAL_POSITION:
            TB2_SendAck(TB_ERR_OK, TB2_param.actual_position);
            break;
     ac4:	17 c2       	rjmp	.+1070   	; 0xef4 <TB2_Decode+0x5cc>
          case TB_PARAM_ACCELERATION:
            TB2_SendAck(TB_ERR_OK, TB2_param.acceleration);
     ac6:	40 91 df 00 	lds	r20, 0x00DF
     aca:	50 91 e0 00 	lds	r21, 0x00E0
     ace:	60 91 e1 00 	lds	r22, 0x00E1
     ad2:	70 91 e2 00 	lds	r23, 0x00E2
     ad6:	84 e6       	ldi	r24, 0x64	; 100
     ad8:	ef de       	rcall	.-546    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     ada:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_ACTUAL_POSITION:
            TB2_SendAck(TB_ERR_OK, TB2_param.actual_position);
            break;
          case TB_PARAM_ACCELERATION:
            TB2_SendAck(TB_ERR_OK, TB2_param.acceleration);
            break;
     adc:	0b c2       	rjmp	.+1046   	; 0xef4 <TB2_Decode+0x5cc>
          case TB_PARAM_CURRENT_RUN:
            TB2_SendAck(TB_ERR_OK, TB2_param.current);
     ade:	40 91 e3 00 	lds	r20, 0x00E3
     ae2:	50 91 e4 00 	lds	r21, 0x00E4
     ae6:	60 91 e5 00 	lds	r22, 0x00E5
     aea:	70 91 e6 00 	lds	r23, 0x00E6
     aee:	84 e6       	ldi	r24, 0x64	; 100
     af0:	e3 de       	rcall	.-570    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     af2:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_ACCELERATION:
            TB2_SendAck(TB_ERR_OK, TB2_param.acceleration);
            break;
          case TB_PARAM_CURRENT_RUN:
            TB2_SendAck(TB_ERR_OK, TB2_param.current);
            break;
     af4:	ff c1       	rjmp	.+1022   	; 0xef4 <TB2_Decode+0x5cc>
          case TB_PARAM_CURRENT_HOLD:
            TB2_SendAck(TB_ERR_OK, TB2_param.current_hold);
     af6:	40 91 e7 00 	lds	r20, 0x00E7
     afa:	50 91 e8 00 	lds	r21, 0x00E8
     afe:	60 91 e9 00 	lds	r22, 0x00E9
     b02:	70 91 ea 00 	lds	r23, 0x00EA
     b06:	84 e6       	ldi	r24, 0x64	; 100
     b08:	d7 de       	rcall	.-594    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     b0a:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_CURRENT_RUN:
            TB2_SendAck(TB_ERR_OK, TB2_param.current);
            break;
          case TB_PARAM_CURRENT_HOLD:
            TB2_SendAck(TB_ERR_OK, TB2_param.current_hold);
            break;
     b0c:	f3 c1       	rjmp	.+998    	; 0xef4 <TB2_Decode+0x5cc>
          case TB_PARAM_SPEED:
            TB2_SendAck(TB_ERR_OK, TB2_param.speed);
     b0e:	40 91 db 00 	lds	r20, 0x00DB
     b12:	50 91 dc 00 	lds	r21, 0x00DC
     b16:	60 91 dd 00 	lds	r22, 0x00DD
     b1a:	70 91 de 00 	lds	r23, 0x00DE
     b1e:	84 e6       	ldi	r24, 0x64	; 100
     b20:	cb de       	rcall	.-618    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     b22:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_CURRENT_HOLD:
            TB2_SendAck(TB_ERR_OK, TB2_param.current_hold);
            break;
          case TB_PARAM_SPEED:
            TB2_SendAck(TB_ERR_OK, TB2_param.speed);
            break;
     b24:	e7 c1       	rjmp	.+974    	; 0xef4 <TB2_Decode+0x5cc>
          case TB_PARAM_RESOLUTION:
            TB2_SendAck(TB_ERR_OK, TB2_param.resolution);
     b26:	40 91 eb 00 	lds	r20, 0x00EB
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	84 e6       	ldi	r24, 0x64	; 100
     b32:	c2 de       	rcall	.-636    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     b34:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_SPEED:
            TB2_SendAck(TB_ERR_OK, TB2_param.speed);
            break;
          case TB_PARAM_RESOLUTION:
            TB2_SendAck(TB_ERR_OK, TB2_param.resolution);
            break;
     b36:	de c1       	rjmp	.+956    	; 0xef4 <TB2_Decode+0x5cc>
          case TB_PARAM_RFS_DISTANCE:
            TB2_SendAck(TB_ERR_OK, TB2_param.rfs_distance);
     b38:	40 91 ec 00 	lds	r20, 0x00EC
     b3c:	50 91 ed 00 	lds	r21, 0x00ED
     b40:	60 91 ee 00 	lds	r22, 0x00EE
     b44:	70 91 ef 00 	lds	r23, 0x00EF
     b48:	84 e6       	ldi	r24, 0x64	; 100
     b4a:	b6 de       	rcall	.-660    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
          case TB_PARAM_RESOLUTION:
            TB2_SendAck(TB_ERR_OK, TB2_param.resolution);
            break;
          case TB_PARAM_RFS_DISTANCE:
            TB2_SendAck(TB_ERR_OK, TB2_param.rfs_distance);
            break;
     b4e:	d2 c1       	rjmp	.+932    	; 0xef4 <TB2_Decode+0x5cc>
// doplnit nastavitelné parametry
          default:
            TB2_SendAck(TB_ERR_VALUE, 0);
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	ba 01       	movw	r22, r20
     b56:	84 e0       	ldi	r24, 0x04	; 4
     b58:	af de       	rcall	.-674    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     b5a:	80 e0       	ldi	r24, 0x00	; 0
            TB2_SendAck(TB_ERR_OK, TB2_param.rfs_distance);
            break;
// doplnit nastavitelné parametry
          default:
            TB2_SendAck(TB_ERR_VALUE, 0);
            break;
     b5c:	cb c1       	rjmp	.+918    	; 0xef4 <TB2_Decode+0x5cc>
        }
      }
      break;
    case TB_CMD_SIO:
      switch (TB2_bufIn[TB_BUF_MOTOR]) {
     b5e:	20 91 fc 00 	lds	r18, 0x00FC
     b62:	21 30       	cpi	r18, 0x01	; 1
     b64:	59 f0       	breq	.+22     	; 0xb7c <TB2_Decode+0x254>
     b66:	18 f0       	brcs	.+6      	; 0xb6e <TB2_Decode+0x246>
     b68:	22 30       	cpi	r18, 0x02	; 2
     b6a:	79 f0       	breq	.+30     	; 0xb8a <TB2_Decode+0x262>
     b6c:	42 c0       	rjmp	.+132    	; 0xbf2 <TB2_Decode+0x2ca>
        case 0:
          #ifdef TB2_SIO_BANK_0_IMPLEMENTED
            return TB_CMD_SIO;
          #else
            TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	ba 01       	movw	r22, r20
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	a0 de       	rcall	.-704    	; 0x8b8 <TB2_SendAck>
          }
          break;
        default:
          TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
      }
      return TB_CMD_SIO;
     b78:	8e e0       	ldi	r24, 0x0E	; 14
          #ifdef TB2_SIO_BANK_0_IMPLEMENTED
            return TB_CMD_SIO;
          #else
            TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
          #endif
          break;
     b7a:	bc c1       	rjmp	.+888    	; 0xef4 <TB2_Decode+0x5cc>
        case 1:
          #ifdef TB2_SIO_BANK_1_IMPLEMENTED
            return TB_CMD_SIO;
          #else
            TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	ba 01       	movw	r22, r20
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	99 de       	rcall	.-718    	; 0x8b8 <TB2_SendAck>
          }
          break;
        default:
          TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
      }
      return TB_CMD_SIO;
     b86:	8e e0       	ldi	r24, 0x0E	; 14
          #ifdef TB2_SIO_BANK_1_IMPLEMENTED
            return TB_CMD_SIO;
          #else
            TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
          #endif
          break;
     b88:	b5 c1       	rjmp	.+874    	; 0xef4 <TB2_Decode+0x5cc>
        case 2:
          switch (TB2_bufIn[TB_BUF_TYPE]) {
     b8a:	20 91 fb 00 	lds	r18, 0x00FB
     b8e:	22 23       	and	r18, r18
     b90:	19 f0       	breq	.+6      	; 0xb98 <TB2_Decode+0x270>
     b92:	21 30       	cpi	r18, 0x01	; 1
     b94:	a1 f0       	breq	.+40     	; 0xbbe <TB2_Decode+0x296>
     b96:	26 c0       	rjmp	.+76     	; 0xbe4 <TB2_Decode+0x2bc>
            case 0:
              TB2_out.b0 = (TB2_Value != 0);
     b98:	21 e0       	ldi	r18, 0x01	; 1
     b9a:	67 2b       	or	r22, r23
     b9c:	68 2b       	or	r22, r24
     b9e:	69 2b       	or	r22, r25
     ba0:	09 f4       	brne	.+2      	; 0xba4 <TB2_Decode+0x27c>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	80 91 c8 00 	lds	r24, 0x00C8
     ba8:	20 fb       	bst	r18, 0
     baa:	80 f9       	bld	r24, 0
     bac:	80 93 c8 00 	sts	0x00C8, r24

/******************************************************/
// send OK response from module
inline void TB2_SendAckOK(void)
{
  TB2_SendAck(100, 0);
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	ba 01       	movw	r22, r20
     bb6:	84 e6       	ldi	r24, 0x64	; 100
     bb8:	7f de       	rcall	.-770    	; 0x8b8 <TB2_SendAck>
          }
          break;
        default:
          TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
      }
      return TB_CMD_SIO;
     bba:	8e e0       	ldi	r24, 0x0E	; 14
     bbc:	9b c1       	rjmp	.+822    	; 0xef4 <TB2_Decode+0x5cc>
            case 0:
              TB2_out.b0 = (TB2_Value != 0);
              TB2_SendAckOK();
              break;
            case 1:
              TB2_out.b1 = (TB2_Value != 0);
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	67 2b       	or	r22, r23
     bc2:	68 2b       	or	r22, r24
     bc4:	69 2b       	or	r22, r25
     bc6:	09 f4       	brne	.+2      	; 0xbca <TB2_Decode+0x2a2>
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	80 91 c8 00 	lds	r24, 0x00C8
     bce:	20 fb       	bst	r18, 0
     bd0:	81 f9       	bld	r24, 1
     bd2:	80 93 c8 00 	sts	0x00C8, r24

/******************************************************/
// send OK response from module
inline void TB2_SendAckOK(void)
{
  TB2_SendAck(100, 0);
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	ba 01       	movw	r22, r20
     bdc:	84 e6       	ldi	r24, 0x64	; 100
     bde:	6c de       	rcall	.-808    	; 0x8b8 <TB2_SendAck>
          }
          break;
        default:
          TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
      }
      return TB_CMD_SIO;
     be0:	8e e0       	ldi	r24, 0x0E	; 14
     be2:	88 c1       	rjmp	.+784    	; 0xef4 <TB2_Decode+0x5cc>
            case 1:
              TB2_out.b1 = (TB2_Value != 0);
              TB2_SendAckOK();
              break;
            default:
              TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	ba 01       	movw	r22, r20
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	65 de       	rcall	.-822    	; 0x8b8 <TB2_SendAck>
          }
          break;
        default:
          TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
      }
      return TB_CMD_SIO;
     bee:	8e e0       	ldi	r24, 0x0E	; 14
              TB2_out.b1 = (TB2_Value != 0);
              TB2_SendAckOK();
              break;
            default:
              TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
              break;
     bf0:	81 c1       	rjmp	.+770    	; 0xef4 <TB2_Decode+0x5cc>
          }
          break;
        default:
          TB2_SendAck(TB_ERR_TYPE, 0); // invalid value
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	ba 01       	movw	r22, r20
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	5e de       	rcall	.-836    	; 0x8b8 <TB2_SendAck>
      }
      return TB_CMD_SIO;
     bfc:	8e e0       	ldi	r24, 0x0E	; 14
     bfe:	7a c1       	rjmp	.+756    	; 0xef4 <TB2_Decode+0x5cc>
      break;
    case TB_CMD_GIO:
      switch (TB2_bufIn[TB_BUF_MOTOR]) {
     c00:	80 91 fc 00 	lds	r24, 0x00FC
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	29 f0       	breq	.+10     	; 0xc12 <TB2_Decode+0x2ea>
     c08:	30 f0       	brcs	.+12     	; 0xc16 <TB2_Decode+0x2ee>
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	09 f4       	brne	.+2      	; 0xc10 <TB2_Decode+0x2e8>
     c0e:	41 c0       	rjmp	.+130    	; 0xc92 <TB2_Decode+0x36a>
     c10:	70 c1       	rjmp	.+736    	; 0xef2 <TB2_Decode+0x5ca>
              break;
          }
          break;
        case 1: // analog inputs (2)
          //TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
          return TB_CMD_GIO;
     c12:	8f e0       	ldi	r24, 0x0F	; 15
     c14:	6f c1       	rjmp	.+734    	; 0xef4 <TB2_Decode+0x5cc>
      return TB_CMD_SIO;
      break;
    case TB_CMD_GIO:
      switch (TB2_bufIn[TB_BUF_MOTOR]) {
        case 0: // inputs (4)
          switch (TB2_bufIn[TB_BUF_TYPE]) {
     c16:	80 91 fb 00 	lds	r24, 0x00FB
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	81 f0       	breq	.+32     	; 0xc3e <TB2_Decode+0x316>
     c1e:	28 f0       	brcs	.+10     	; 0xc2a <TB2_Decode+0x302>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	c1 f0       	breq	.+48     	; 0xc54 <TB2_Decode+0x32c>
     c24:	83 30       	cpi	r24, 0x03	; 3
     c26:	11 f1       	breq	.+68     	; 0xc6c <TB2_Decode+0x344>
     c28:	2d c0       	rjmp	.+90     	; 0xc84 <TB2_Decode+0x35c>
            case 0:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b0);
     c2a:	40 91 02 01 	lds	r20, 0x0102
     c2e:	41 70       	andi	r20, 0x01	; 1
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	84 e6       	ldi	r24, 0x64	; 100
     c38:	3f de       	rcall	.-898    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
      switch (TB2_bufIn[TB_BUF_MOTOR]) {
        case 0: // inputs (4)
          switch (TB2_bufIn[TB_BUF_TYPE]) {
            case 0:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b0);
              break;
     c3c:	5b c1       	rjmp	.+694    	; 0xef4 <TB2_Decode+0x5cc>
            case 1:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b1);
     c3e:	40 91 02 01 	lds	r20, 0x0102
     c42:	46 95       	lsr	r20
     c44:	41 70       	andi	r20, 0x01	; 1
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	84 e6       	ldi	r24, 0x64	; 100
     c4e:	34 de       	rcall	.-920    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     c50:	80 e0       	ldi	r24, 0x00	; 0
            case 0:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b0);
              break;
            case 1:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b1);
              break;
     c52:	50 c1       	rjmp	.+672    	; 0xef4 <TB2_Decode+0x5cc>
            case 2:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b2);
     c54:	40 91 02 01 	lds	r20, 0x0102
     c58:	42 fb       	bst	r20, 2
     c5a:	44 27       	eor	r20, r20
     c5c:	40 f9       	bld	r20, 0
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	84 e6       	ldi	r24, 0x64	; 100
     c66:	28 de       	rcall	.-944    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     c68:	80 e0       	ldi	r24, 0x00	; 0
            case 1:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b1);
              break;
            case 2:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b2);
              break;
     c6a:	44 c1       	rjmp	.+648    	; 0xef4 <TB2_Decode+0x5cc>
            case 3:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b3);
     c6c:	40 91 02 01 	lds	r20, 0x0102
     c70:	43 fb       	bst	r20, 3
     c72:	44 27       	eor	r20, r20
     c74:	40 f9       	bld	r20, 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	84 e6       	ldi	r24, 0x64	; 100
     c7e:	1c de       	rcall	.-968    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     c80:	80 e0       	ldi	r24, 0x00	; 0
            case 2:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b2);
              break;
            case 3:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b3);
              break;
     c82:	38 c1       	rjmp	.+624    	; 0xef4 <TB2_Decode+0x5cc>
            default:
              TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	ba 01       	movw	r22, r20
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	15 de       	rcall	.-982    	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
            case 3:
              TB2_SendAck(TB_ERR_OK, TB2_inp.b3);
              break;
            default:
              TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
              break;
     c90:	31 c1       	rjmp	.+610    	; 0xef4 <TB2_Decode+0x5cc>
        case 1: // analog inputs (2)
          //TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
          return TB_CMD_GIO;
          break;
        case 2: // outputs (2);
          switch (TB2_bufIn[TB_BUF_TYPE]) {
     c92:	80 91 fb 00 	lds	r24, 0x00FB
     c96:	88 23       	and	r24, r24
     c98:	19 f0       	breq	.+6      	; 0xca0 <TB2_Decode+0x378>
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	59 f0       	breq	.+22     	; 0xcb4 <TB2_Decode+0x38c>
     c9e:	15 c0       	rjmp	.+42     	; 0xcca <TB2_Decode+0x3a2>
            case 0:
              TB2_SendAck(TB_ERR_OK, TB2_out.b0);
     ca0:	40 91 c8 00 	lds	r20, 0x00C8
     ca4:	41 70       	andi	r20, 0x01	; 1
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	84 e6       	ldi	r24, 0x64	; 100
     cae:	04 de       	rcall	.-1016   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     cb0:	80 e0       	ldi	r24, 0x00	; 0
          break;
        case 2: // outputs (2);
          switch (TB2_bufIn[TB_BUF_TYPE]) {
            case 0:
              TB2_SendAck(TB_ERR_OK, TB2_out.b0);
              break;
     cb2:	20 c1       	rjmp	.+576    	; 0xef4 <TB2_Decode+0x5cc>
            case 1:
              TB2_SendAck(TB_ERR_OK, TB2_out.b1);
     cb4:	40 91 c8 00 	lds	r20, 0x00C8
     cb8:	46 95       	lsr	r20
     cba:	41 70       	andi	r20, 0x01	; 1
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	84 e6       	ldi	r24, 0x64	; 100
     cc4:	f9 dd       	rcall	.-1038   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     cc6:	80 e0       	ldi	r24, 0x00	; 0
            case 0:
              TB2_SendAck(TB_ERR_OK, TB2_out.b0);
              break;
            case 1:
              TB2_SendAck(TB_ERR_OK, TB2_out.b1);
              break;
     cc8:	15 c1       	rjmp	.+554    	; 0xef4 <TB2_Decode+0x5cc>
            default:
              TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	ba 01       	movw	r22, r20
     cd0:	84 e0       	ldi	r24, 0x04	; 4
     cd2:	f2 dd       	rcall	.-1052   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
            case 1:
              TB2_SendAck(TB_ERR_OK, TB2_out.b1);
              break;
            default:
              TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
              break;
     cd6:	0e c1       	rjmp	.+540    	; 0xef4 <TB2_Decode+0x5cc>
          }
          break;
      }
      break;
    case TB_CMD_RFS:
      return TB_CMD_RFS;
     cd8:	8d e0       	ldi	r24, 0x0D	; 13
     cda:	0c c1       	rjmp	.+536    	; 0xef4 <TB2_Decode+0x5cc>
      break;
    case TB_CMD_SGP:
      if (TB2_bufIn[TB_BUF_MOTOR] != 0) {
     cdc:	20 91 fc 00 	lds	r18, 0x00FC
     ce0:	22 23       	and	r18, r18
     ce2:	39 f0       	breq	.+14     	; 0xcf2 <TB2_Decode+0x3ca>
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	ba 01       	movw	r22, r20
     cea:	84 e0       	ldi	r24, 0x04	; 4
     cec:	e5 dd       	rcall	.-1078   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	01 c1       	rjmp	.+514    	; 0xef4 <TB2_Decode+0x5cc>
      break;
    case TB_CMD_SGP:
      if (TB2_bufIn[TB_BUF_MOTOR] != 0) {
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB2_bufIn[TB_BUF_TYPE]) {
     cf2:	20 91 fb 00 	lds	r18, 0x00FB
     cf6:	21 34       	cpi	r18, 0x41	; 65
     cf8:	41 f1       	breq	.+80     	; 0xd4a <TB2_Decode+0x422>
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <TB2_Decode+0x3da>
     cfc:	20 34       	cpi	r18, 0x40	; 64
     cfe:	41 f0       	breq	.+16     	; 0xd10 <TB2_Decode+0x3e8>
     d00:	7e c0       	rjmp	.+252    	; 0xdfe <TB2_Decode+0x4d6>
     d02:	22 34       	cpi	r18, 0x42	; 66
     d04:	09 f4       	brne	.+2      	; 0xd08 <TB2_Decode+0x3e0>
     d06:	3f c0       	rjmp	.+126    	; 0xd86 <TB2_Decode+0x45e>
     d08:	2c 34       	cpi	r18, 0x4C	; 76
     d0a:	09 f4       	brne	.+2      	; 0xd0e <TB2_Decode+0x3e6>
     d0c:	5a c0       	rjmp	.+180    	; 0xdc2 <TB2_Decode+0x49a>
     d0e:	77 c0       	rjmp	.+238    	; 0xdfe <TB2_Decode+0x4d6>
          case TB_GBPARAM_EEMAGIC:
            if (TB2_Value != TB2_gbparam.eemagic) {
     d10:	00 91 cd 00 	lds	r16, 0x00CD
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	60 17       	cp	r22, r16
     d1c:	71 07       	cpc	r23, r17
     d1e:	82 07       	cpc	r24, r18
     d20:	93 07       	cpc	r25, r19
     d22:	61 f0       	breq	.+24     	; 0xd3c <TB2_Decode+0x414>
              TB2_gbparam.eemagic = TB2_Value;
     d24:	60 93 cd 00 	sts	0x00CD, r22
              b = (void *) &(TB2_gbparam.eemagic) - (void *) &(TB2_gbparam);
     d28:	19 82       	std	Y+1, r1	; 0x01
              eeprom_update_byte(b+addr_setting_in_eeprom2, TB2_gbparam.eemagic);
     d2a:	49 81       	ldd	r20, Y+1	; 0x01
     d2c:	20 91 03 01 	lds	r18, 0x0103
     d30:	30 91 04 01 	lds	r19, 0x0104
     d34:	c9 01       	movw	r24, r18
     d36:	84 0f       	add	r24, r20
     d38:	91 1d       	adc	r25, r1
     d3a:	ca d4       	rcall	.+2452   	; 0x16d0 <__eeupd_byte_m8>
            }
            TB2_SendAck(TB_ERR_OK, 0);
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	ba 01       	movw	r22, r20
     d42:	84 e6       	ldi	r24, 0x64	; 100
     d44:	b9 dd       	rcall	.-1166   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     d46:	80 e0       	ldi	r24, 0x00	; 0
              TB2_gbparam.eemagic = TB2_Value;
              b = (void *) &(TB2_gbparam.eemagic) - (void *) &(TB2_gbparam);
              eeprom_update_byte(b+addr_setting_in_eeprom2, TB2_gbparam.eemagic);
            }
            TB2_SendAck(TB_ERR_OK, 0);
            break;
     d48:	d5 c0       	rjmp	.+426    	; 0xef4 <TB2_Decode+0x5cc>
          case TB_GBPARAM_BAUD:
            if (TB2_Value != TB2_gbparam.baud) {
     d4a:	00 91 ce 00 	lds	r16, 0x00CE
     d4e:	10 e0       	ldi	r17, 0x00	; 0
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	60 17       	cp	r22, r16
     d56:	71 07       	cpc	r23, r17
     d58:	82 07       	cpc	r24, r18
     d5a:	93 07       	cpc	r25, r19
     d5c:	69 f0       	breq	.+26     	; 0xd78 <TB2_Decode+0x450>
              TB2_gbparam.baud = TB2_Value;
     d5e:	60 93 ce 00 	sts	0x00CE, r22
              b = (void *) &(TB2_gbparam.baud) - (void *) &(TB2_gbparam);
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	29 83       	std	Y+1, r18	; 0x01
              eeprom_update_byte(b+addr_setting_in_eeprom2, TB2_gbparam.baud);
     d66:	49 81       	ldd	r20, Y+1	; 0x01
     d68:	20 91 03 01 	lds	r18, 0x0103
     d6c:	30 91 04 01 	lds	r19, 0x0104
     d70:	c9 01       	movw	r24, r18
     d72:	84 0f       	add	r24, r20
     d74:	91 1d       	adc	r25, r1
     d76:	ac d4       	rcall	.+2392   	; 0x16d0 <__eeupd_byte_m8>
            }
            TB2_SendAck(TB_ERR_OK, 0);
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	ba 01       	movw	r22, r20
     d7e:	84 e6       	ldi	r24, 0x64	; 100
     d80:	9b dd       	rcall	.-1226   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     d82:	80 e0       	ldi	r24, 0x00	; 0
              TB2_gbparam.baud = TB2_Value;
              b = (void *) &(TB2_gbparam.baud) - (void *) &(TB2_gbparam);
              eeprom_update_byte(b+addr_setting_in_eeprom2, TB2_gbparam.baud);
            }
            TB2_SendAck(TB_ERR_OK, 0);
            break;
     d84:	b7 c0       	rjmp	.+366    	; 0xef4 <TB2_Decode+0x5cc>
          case TB_GBPARAM_ADDRESS:
            if (TB2_Value != TB2_gbparam.address) {
     d86:	00 91 cf 00 	lds	r16, 0x00CF
     d8a:	10 e0       	ldi	r17, 0x00	; 0
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	60 17       	cp	r22, r16
     d92:	71 07       	cpc	r23, r17
     d94:	82 07       	cpc	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	69 f0       	breq	.+26     	; 0xdb4 <TB2_Decode+0x48c>
              TB2_gbparam.address = TB2_Value;
     d9a:	60 93 cf 00 	sts	0x00CF, r22
              b = (void *) &(TB2_gbparam.address) - (void *) &(TB2_gbparam);
     d9e:	22 e0       	ldi	r18, 0x02	; 2
     da0:	29 83       	std	Y+1, r18	; 0x01
              eeprom_update_byte(b+addr_setting_in_eeprom2, TB2_gbparam.address);
     da2:	49 81       	ldd	r20, Y+1	; 0x01
     da4:	20 91 03 01 	lds	r18, 0x0103
     da8:	30 91 04 01 	lds	r19, 0x0104
     dac:	c9 01       	movw	r24, r18
     dae:	84 0f       	add	r24, r20
     db0:	91 1d       	adc	r25, r1
     db2:	8e d4       	rcall	.+2332   	; 0x16d0 <__eeupd_byte_m8>
            }
            TB2_SendAck(TB_ERR_OK, 0);
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	ba 01       	movw	r22, r20
     dba:	84 e6       	ldi	r24, 0x64	; 100
     dbc:	7d dd       	rcall	.-1286   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     dbe:	80 e0       	ldi	r24, 0x00	; 0
              TB2_gbparam.address = TB2_Value;
              b = (void *) &(TB2_gbparam.address) - (void *) &(TB2_gbparam);
              eeprom_update_byte(b+addr_setting_in_eeprom2, TB2_gbparam.address);
            }
            TB2_SendAck(TB_ERR_OK, 0);
            break;
     dc0:	99 c0       	rjmp	.+306    	; 0xef4 <TB2_Decode+0x5cc>
          case TB_GBPARAM_HOST_ADDR:
            if (TB2_Value != TB2_gbparam.host_address) {
     dc2:	00 91 d1 00 	lds	r16, 0x00D1
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	60 17       	cp	r22, r16
     dce:	71 07       	cpc	r23, r17
     dd0:	82 07       	cpc	r24, r18
     dd2:	93 07       	cpc	r25, r19
     dd4:	69 f0       	breq	.+26     	; 0xdf0 <TB2_Decode+0x4c8>
              TB2_gbparam.host_address = TB2_Value;
     dd6:	60 93 d1 00 	sts	0x00D1, r22
              b = (void *) &(TB2_gbparam.host_address) - (void *) &(TB2_gbparam);
     dda:	24 e0       	ldi	r18, 0x04	; 4
     ddc:	29 83       	std	Y+1, r18	; 0x01
              eeprom_update_byte(b+addr_setting_in_eeprom2, TB2_gbparam.host_address);
     dde:	49 81       	ldd	r20, Y+1	; 0x01
     de0:	20 91 03 01 	lds	r18, 0x0103
     de4:	30 91 04 01 	lds	r19, 0x0104
     de8:	c9 01       	movw	r24, r18
     dea:	84 0f       	add	r24, r20
     dec:	91 1d       	adc	r25, r1
     dee:	70 d4       	rcall	.+2272   	; 0x16d0 <__eeupd_byte_m8>
            }
            TB2_SendAck(TB_ERR_OK, 0);
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	ba 01       	movw	r22, r20
     df6:	84 e6       	ldi	r24, 0x64	; 100
     df8:	5f dd       	rcall	.-1346   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
              TB2_gbparam.host_address = TB2_Value;
              b = (void *) &(TB2_gbparam.host_address) - (void *) &(TB2_gbparam);
              eeprom_update_byte(b+addr_setting_in_eeprom2, TB2_gbparam.host_address);
            }
            TB2_SendAck(TB_ERR_OK, 0);
            break;
     dfc:	7b c0       	rjmp	.+246    	; 0xef4 <TB2_Decode+0x5cc>
          default:
            TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	ba 01       	movw	r22, r20
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	58 dd       	rcall	.-1360   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     e08:	80 e0       	ldi	r24, 0x00	; 0
            }
            TB2_SendAck(TB_ERR_OK, 0);
            break;
          default:
            TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
            break;
     e0a:	74 c0       	rjmp	.+232    	; 0xef4 <TB2_Decode+0x5cc>
        }
      }
      break;
    case TB_CMD_GGP:
      if (TB2_bufIn[TB_BUF_MOTOR] != 0) {
     e0c:	80 91 fc 00 	lds	r24, 0x00FC
     e10:	88 23       	and	r24, r24
     e12:	39 f0       	breq	.+14     	; 0xe22 <TB2_Decode+0x4fa>
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	ba 01       	movw	r22, r20
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	4d dd       	rcall	.-1382   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	69 c0       	rjmp	.+210    	; 0xef4 <TB2_Decode+0x5cc>
      break;
    case TB_CMD_GGP:
      if (TB2_bufIn[TB_BUF_MOTOR] != 0) {
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB2_bufIn[TB_BUF_TYPE]) {
     e22:	80 91 fb 00 	lds	r24, 0x00FB
     e26:	81 34       	cpi	r24, 0x41	; 65
     e28:	49 f0       	breq	.+18     	; 0xe3c <TB2_Decode+0x514>
     e2a:	18 f4       	brcc	.+6      	; 0xe32 <TB2_Decode+0x50a>
     e2c:	80 34       	cpi	r24, 0x40	; 64
     e2e:	09 f1       	breq	.+66     	; 0xe72 <TB2_Decode+0x54a>
     e30:	29 c0       	rjmp	.+82     	; 0xe84 <TB2_Decode+0x55c>
     e32:	82 34       	cpi	r24, 0x42	; 66
     e34:	61 f0       	breq	.+24     	; 0xe4e <TB2_Decode+0x526>
     e36:	8c 34       	cpi	r24, 0x4C	; 76
     e38:	99 f0       	breq	.+38     	; 0xe60 <TB2_Decode+0x538>
     e3a:	24 c0       	rjmp	.+72     	; 0xe84 <TB2_Decode+0x55c>
          case TB_GBPARAM_BAUD:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.baud);
     e3c:	40 91 ce 00 	lds	r20, 0x00CE
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	84 e6       	ldi	r24, 0x64	; 100
     e48:	37 dd       	rcall	.-1426   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     e4a:	80 e0       	ldi	r24, 0x00	; 0
        TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
      } else {
        switch (TB2_bufIn[TB_BUF_TYPE]) {
          case TB_GBPARAM_BAUD:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.baud);
            break;
     e4c:	53 c0       	rjmp	.+166    	; 0xef4 <TB2_Decode+0x5cc>
          case TB_GBPARAM_ADDRESS:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.address);
     e4e:	40 91 cf 00 	lds	r20, 0x00CF
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	84 e6       	ldi	r24, 0x64	; 100
     e5a:	2e dd       	rcall	.-1444   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     e5c:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_BAUD:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.baud);
            break;
          case TB_GBPARAM_ADDRESS:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.address);
            break;
     e5e:	4a c0       	rjmp	.+148    	; 0xef4 <TB2_Decode+0x5cc>
          case TB_GBPARAM_HOST_ADDR:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.host_address);
     e60:	40 91 d1 00 	lds	r20, 0x00D1
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	84 e6       	ldi	r24, 0x64	; 100
     e6c:	25 dd       	rcall	.-1462   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     e6e:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_ADDRESS:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.address);
            break;
          case TB_GBPARAM_HOST_ADDR:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.host_address);
            break;
     e70:	41 c0       	rjmp	.+130    	; 0xef4 <TB2_Decode+0x5cc>
          case TB_GBPARAM_EEMAGIC:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.eemagic);
     e72:	40 91 cd 00 	lds	r20, 0x00CD
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	84 e6       	ldi	r24, 0x64	; 100
     e7e:	1c dd       	rcall	.-1480   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     e80:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_HOST_ADDR:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.host_address);
            break;
          case TB_GBPARAM_EEMAGIC:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.eemagic);
            break;
     e82:	38 c0       	rjmp	.+112    	; 0xef4 <TB2_Decode+0x5cc>
          default:
            TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	ba 01       	movw	r22, r20
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	15 dd       	rcall	.-1494   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     e8e:	80 e0       	ldi	r24, 0x00	; 0
          case TB_GBPARAM_EEMAGIC:
            TB2_SendAck(TB_ERR_OK, TB2_gbparam.eemagic);
            break;
          default:
            TB2_SendAck(TB_ERR_VALUE, 0); // invalid value
            break;
     e90:	31 c0       	rjmp	.+98     	; 0xef4 <TB2_Decode+0x5cc>
        }
      }
      break;
    case 136: // get module version
      if (TB2_bufIn[TB_BUF_TYPE] == 0) {
     e92:	80 91 fb 00 	lds	r24, 0x00FB
     e96:	81 11       	cpse	r24, r1
     e98:	1b c0       	rjmp	.+54     	; 0xed0 <TB2_Decode+0x5a8>
        // text mode
        TB2_bufOut[0] = TB2_AddrReply;
     e9a:	80 91 d2 00 	lds	r24, 0x00D2
     e9e:	80 93 f0 00 	sts	0x00F0, r24
        TB2_bufOut[1] = '1';
     ea2:	81 e3       	ldi	r24, 0x31	; 49
     ea4:	80 93 f1 00 	sts	0x00F1, r24
        TB2_bufOut[2] = '0';
     ea8:	90 e3       	ldi	r25, 0x30	; 48
     eaa:	90 93 f2 00 	sts	0x00F2, r25
        TB2_bufOut[3] = '2';
     eae:	22 e3       	ldi	r18, 0x32	; 50
     eb0:	20 93 f3 00 	sts	0x00F3, r18
        TB2_bufOut[4] = '1';
     eb4:	80 93 f4 00 	sts	0x00F4, r24
        TB2_bufOut[5] = 'V';
     eb8:	36 e5       	ldi	r19, 0x56	; 86
     eba:	30 93 f5 00 	sts	0x00F5, r19
        TB2_bufOut[6] = '1';
     ebe:	80 93 f6 00 	sts	0x00F6, r24
        TB2_bufOut[7] = '2';
     ec2:	20 93 f7 00 	sts	0x00F7, r18
        TB2_bufOut[8] = '0';
     ec6:	90 93 f8 00 	sts	0x00F8, r25
        TB2_Send();
     eca:	a9 dc       	rcall	.-1710   	; 0x81e <TB2_Send>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	12 c0       	rjmp	.+36     	; 0xef4 <TB2_Decode+0x5cc>
        TB2_bufOut[7] = '2';
        TB2_bufOut[8] = '0';
        TB2_Send();
       } else {
        // binary mode
        TB2_SendAck(TB_ERR_OK, (0x10203040));
     ed0:	40 e4       	ldi	r20, 0x40	; 64
     ed2:	50 e3       	ldi	r21, 0x30	; 48
     ed4:	60 e2       	ldi	r22, 0x20	; 32
     ed6:	70 e1       	ldi	r23, 0x10	; 16
     ed8:	84 e6       	ldi	r24, 0x64	; 100
     eda:	ee dc       	rcall	.-1572   	; 0x8b8 <TB2_SendAck>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0a c0       	rjmp	.+20     	; 0xef4 <TB2_Decode+0x5cc>
        // binary mode
        TB2_SendAck(TB_ERR_OK, (0x10203040));
      };
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	ba 01       	movw	r22, r20
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	e7 dc       	rcall	.-1586   	; 0x8b8 <TB2_SendAck>
      return 0;
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <TB2_Decode+0x5cc>
    case TB_CMD_ROL:
      TB2_SendAck(TB_ERR_OK, 0);
      return TB_CMD_ROL;
      break;
    case TB_CMD_MVP:
      return TB_CMD_MVP;
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <TB2_Decode+0x5cc>
      break;
    default:
      TB2_SendAck(TB_ERR_COMMAND, 0); // invalid command
      return 0;
  }
  return 0;
     ef2:	80 e0       	ldi	r24, 0x00	; 0
}
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <uart_pac_rx_empty>:
  uart0_buf_rx_ptr_b = uart0_buf_rx_ptr_e;
}

inline byte uart_pac_rx_empty(void)
{
  return (uart0_buf_pac_rx_ptr_e == uart0_buf_pac_rx_ptr_b);
     f00:	20 91 6d 00 	lds	r18, 0x006D
     f04:	90 91 6e 00 	lds	r25, 0x006E
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	29 13       	cpse	r18, r25
     f0c:	80 e0       	ldi	r24, 0x00	; 0
}
     f0e:	08 95       	ret

00000f10 <uart_get_char>:
  return 9;
}

inline byte uart_rx_empty(void)
{
  return (uart0_buf_rx_ptr_e == uart0_buf_rx_ptr_b);
     f10:	90 91 72 00 	lds	r25, 0x0072
     f14:	80 91 73 00 	lds	r24, 0x0073
  // read     -> b++, read *b
  // interrupt safe -> read *(b+1); b++
  byte ptr;
  byte res;
  
  if (uart_rx_empty()) return 0;
     f18:	98 17       	cp	r25, r24
     f1a:	61 f0       	breq	.+24     	; 0xf34 <uart_get_char+0x24>

  ptr = (uart0_buf_rx_ptr_b+1) & UART0_BUFFER_LINEAR_SIZE_MAX;
     f1c:	90 91 73 00 	lds	r25, 0x0073
     f20:	9f 5f       	subi	r25, 0xFF	; 255
     f22:	9f 70       	andi	r25, 0x0F	; 15
  res = uart0_buf_rx[ptr];
     f24:	e9 2f       	mov	r30, r25
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	e2 56       	subi	r30, 0x62	; 98
     f2a:	fe 4f       	sbci	r31, 0xFE	; 254
     f2c:	80 81       	ld	r24, Z
  uart0_buf_rx_ptr_b = ptr;
     f2e:	90 93 73 00 	sts	0x0073, r25
  return res;
     f32:	08 95       	ret
  // read     -> b++, read *b
  // interrupt safe -> read *(b+1); b++
  byte ptr;
  byte res;
  
  if (uart_rx_empty()) return 0;
     f34:	80 e0       	ldi	r24, 0x00	; 0
  ptr = (uart0_buf_rx_ptr_b+1) & UART0_BUFFER_LINEAR_SIZE_MAX;
  res = uart0_buf_rx[ptr];
  uart0_buf_rx_ptr_b = ptr;
  return res;
  
}
     f36:	08 95       	ret

00000f38 <uart_receive_char>:
{
  // write    -> e++, write *e
  // interrupt safe -> write *(e+1); e++
  byte ptr;

  ptr = (uart0_buf_rx_ptr_e+1) & UART0_BUFFER_LINEAR_SIZE_MAX;
     f38:	90 91 72 00 	lds	r25, 0x0072
     f3c:	9f 5f       	subi	r25, 0xFF	; 255
     f3e:	9f 70       	andi	r25, 0x0F	; 15
  uart0_buf_rx[ptr] = dat;
     f40:	e9 2f       	mov	r30, r25
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	e2 56       	subi	r30, 0x62	; 98
     f46:	fe 4f       	sbci	r31, 0xFE	; 254
     f48:	80 83       	st	Z, r24
  uart0_buf_rx_ptr_e = ptr;
     f4a:	90 93 72 00 	sts	0x0072, r25
     f4e:	08 95       	ret

00000f50 <uart_send_char>:
char uart_send_char(void)
{
  byte ptr;
  byte res;

  ptr = uart0_buf_tx_ptr;
     f50:	90 91 71 00 	lds	r25, 0x0071
  res = uart0_buf_tx[ptr];
     f54:	e9 2f       	mov	r30, r25
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	eb 5f       	subi	r30, 0xFB	; 251
     f5a:	fe 4f       	sbci	r31, 0xFE	; 254
     f5c:	80 81       	ld	r24, Z
  uart0_buf_tx_ptr = ptr+1;
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	90 93 71 00 	sts	0x0071, r25
  return res;
}
     f64:	08 95       	ret

00000f66 <uart_send>:
/******************************************************/
// start sending TX buffer
/******************************************************/
void uart_send(void)
{
  if (uart0_flags.txing == false) {
     f66:	80 91 6a 00 	lds	r24, 0x006A
     f6a:	80 fd       	sbrc	r24, 0
     f6c:	0a c0       	rjmp	.+20     	; 0xf82 <uart_send+0x1c>
    // is some data in buffer ?
    uart0_flags.txing = true;
     f6e:	80 91 6a 00 	lds	r24, 0x006A
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	80 93 6a 00 	sts	0x006A, r24
    //uart0_tx_timeout = UART0_TX_TIMEOUT;
    UART0_TX_ENA;  // tx mode
     f78:	92 9a       	sbi	0x12, 2	; 18
    uart0_buf_tx_ptr = 0; // send first byte from buffer
     f7a:	10 92 71 00 	sts	0x0071, r1
    UART0_PROC_UDR = uart_send_char();
     f7e:	e8 df       	rcall	.-48     	; 0xf50 <uart_send_char>
     f80:	8c b9       	out	0x0c, r24	; 12
     f82:	08 95       	ret

00000f84 <uart_interrupt_rx>:
/******************************************************/
// Enable/disable interrupts
/******************************************************/
void uart_interrupt_rx(byte enable)
{
  if (enable)
     f84:	88 23       	and	r24, r24
     f86:	11 f0       	breq	.+4      	; 0xf8c <uart_interrupt_rx+0x8>
    UART0_PROC_UCSRB |= BV(UART0_PROC_RXCIE);
     f88:	57 9a       	sbi	0x0a, 7	; 10
     f8a:	08 95       	ret
   else
    UART0_PROC_UCSRB &= ~BV(UART0_PROC_RXCIE);
     f8c:	57 98       	cbi	0x0a, 7	; 10
     f8e:	08 95       	ret

00000f90 <uart_interrupt_tx>:
}

void uart_interrupt_tx(byte enable)
{
  if (enable)
     f90:	88 23       	and	r24, r24
     f92:	11 f0       	breq	.+4      	; 0xf98 <uart_interrupt_tx+0x8>
    UART0_PROC_UCSRB |= BV(UART0_PROC_TXCIE);
     f94:	56 9a       	sbi	0x0a, 6	; 10
     f96:	08 95       	ret
   else
    UART0_PROC_UCSRB &= ~BV(UART0_PROC_TXCIE);
     f98:	56 98       	cbi	0x0a, 6	; 10
     f9a:	08 95       	ret

00000f9c <__vector_11>:

/******************************************************/
//
/******************************************************/
ISR(UART0_PROC_RX_vect)
{
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
  byte tmpDat;
  byte tmpStatus;
  
  uart0_rx_timeout = UART0_TIMEOUT;
     fbe:	85 e0       	ldi	r24, 0x05	; 5
     fc0:	80 93 6c 00 	sts	0x006C, r24
  tmpStatus = UART0_PROC_UCSRA;
     fc4:	8b b1       	in	r24, 0x0b	; 11
  uart0_status |= tmpStatus;
     fc6:	90 91 6b 00 	lds	r25, 0x006B
     fca:	89 2b       	or	r24, r25
     fcc:	80 93 6b 00 	sts	0x006B, r24
  tmpDat = UART0_PROC_UDR;
     fd0:	8c b1       	in	r24, 0x0c	; 12
  uart_receive_char(tmpDat);
     fd2:	b2 df       	rcall	.-156    	; 0xf38 <uart_receive_char>
}
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__vector_13>:

/******************************************************/
//
/******************************************************/
ISR(UART0_PROC_TX_vect)
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
  byte tmpDat;

  // ???
  if (uart0_flags.txing == false) return;
    1018:	80 91 6a 00 	lds	r24, 0x006A
    101c:	80 ff       	sbrs	r24, 0
    101e:	0d c0       	rjmp	.+26     	; 0x103a <__vector_13+0x44>

  // is next data in buffer?
  if (uart0_buf_tx_ptr > 8) {
    1020:	80 91 71 00 	lds	r24, 0x0071
    1024:	89 30       	cpi	r24, 0x09	; 9
    1026:	38 f0       	brcs	.+14     	; 0x1036 <__vector_13+0x40>
    // whole buffer was sended
    uart0_flags.txing = FALSE;
    1028:	80 91 6a 00 	lds	r24, 0x006A
    102c:	8e 7f       	andi	r24, 0xFE	; 254
    102e:	80 93 6a 00 	sts	0x006A, r24
    // if whole packed was send, wait for response
    //uart0_flags.wait_tx = TRUE;
    UART0_TX_DIS;   // rx mode
    1032:	92 98       	cbi	0x12, 2	; 18
    return;
    1034:	02 c0       	rjmp	.+4      	; 0x103a <__vector_13+0x44>
  } else {
    // send next byte
    tmpDat = uart_send_char();
    1036:	8c df       	rcall	.-232    	; 0xf50 <uart_send_char>
    UART0_PROC_UDR = tmpDat;
    1038:	8c b9       	out	0x0c, r24	; 12
  }
}
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <uart0_init>:
// Initialization
void uart0_init(void)
{
  // UART port

  UART0_PROC_UBRRL = (F_CPU / (16UL * UART0_DEFAULT_BAUD)) - 1;
    105c:	87 e0       	ldi	r24, 0x07	; 7
    105e:	89 b9       	out	0x09, r24	; 9

  UART0_PROC_UCSRB |= BV(UART0_PROC_TXEN) | BV(UART0_PROC_RXEN); /* tx/rx enable */
    1060:	8a b1       	in	r24, 0x0a	; 10
    1062:	88 61       	ori	r24, 0x18	; 24
    1064:	8a b9       	out	0x0a, r24	; 10

  uart_interrupt_rx(true);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	8d df       	rcall	.-230    	; 0xf84 <uart_interrupt_rx>
  uart_interrupt_tx(true);
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	91 df       	rcall	.-222    	; 0xf90 <uart_interrupt_tx>
  uart0_status = 0;
    106e:	10 92 6b 00 	sts	0x006B, r1
    1072:	08 95       	ret

00001074 <uart0_process>:
}

//----------------------------------------------------------
// process internal logic
void uart0_process(void)
{
    1074:	bf 92       	push	r11
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
  return ((uart0_buf_pac_rx_ptr_e - uart0_buf_pac_rx_ptr_b) & UART0_BUFFER_PACKET_SIZE_MAX);
}

inline byte uart_pac_tx_empty(void)
{
  return (uart0_buf_pac_tx_ptr_e == uart0_buf_pac_tx_ptr_b);
    1086:	90 91 6f 00 	lds	r25, 0x006F
    108a:	80 91 70 00 	lds	r24, 0x0070
  byte iptr;
  byte sum;
  byte *ptr;

  // pøedává zpravy na odvysílání z paketového do lineárního bufferu
  if (!uart_pac_tx_empty()) {
    108e:	98 17       	cp	r25, r24
    1090:	41 f1       	breq	.+80     	; 0x10e2 <uart0_process+0x6e>
    // jsou data k odesláni ?
    if ((!uart0_flags.txing)) {
    1092:	80 91 6a 00 	lds	r24, 0x006A
    1096:	80 fd       	sbrc	r24, 0
    1098:	24 c0       	rjmp	.+72     	; 0x10e2 <uart0_process+0x6e>
      // nevysíláme ?
      // zaèneme vysílat dalí zprávu
      iptr = (uart0_buf_pac_tx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
    109a:	50 91 70 00 	lds	r21, 0x0070
    109e:	5f 5f       	subi	r21, 0xFF	; 255
    10a0:	5f 70       	andi	r21, 0x0F	; 15
      ptr = (byte *) &(uart0_buf_pac_tx[iptr].b[0]);
    10a2:	85 2f       	mov	r24, r21
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9c 01       	movw	r18, r24
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	22 0f       	add	r18, r18
    10ae:	33 1f       	adc	r19, r19
    10b0:	22 0f       	add	r18, r18
    10b2:	33 1f       	adc	r19, r19
    10b4:	82 0f       	add	r24, r18
    10b6:	93 1f       	adc	r25, r19
    10b8:	82 55       	subi	r24, 0x52	; 82
    10ba:	9e 4f       	sbci	r25, 0xFE	; 254
    10bc:	9c 01       	movw	r18, r24
    10be:	27 5f       	subi	r18, 0xF7	; 247
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	fc 01       	movw	r30, r24
    10c4:	df 01       	movw	r26, r30
    10c6:	a8 1b       	sub	r26, r24
    10c8:	b9 0b       	sbc	r27, r25
      for (i=0; i<9; i++) {
        uart0_buf_tx[i] = *ptr;
    10ca:	41 91       	ld	r20, Z+
    10cc:	ab 5f       	subi	r26, 0xFB	; 251
    10ce:	be 4f       	sbci	r27, 0xFE	; 254
    10d0:	4c 93       	st	X, r20
    if ((!uart0_flags.txing)) {
      // nevysíláme ?
      // zaèneme vysílat dalí zprávu
      iptr = (uart0_buf_pac_tx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
      ptr = (byte *) &(uart0_buf_pac_tx[iptr].b[0]);
      for (i=0; i<9; i++) {
    10d2:	e2 17       	cp	r30, r18
    10d4:	f3 07       	cpc	r31, r19
    10d6:	b1 f7       	brne	.-20     	; 0x10c4 <uart0_process+0x50>
        uart0_buf_tx[i] = *ptr;
        ptr++;
      }
      uart0_buf_pac_tx_ptr_b = iptr;
    10d8:	50 93 70 00 	sts	0x0070, r21
      uart0_buf_tx_ptr = 0;
    10dc:	10 92 71 00 	sts	0x0071, r1
      uart_send();
    10e0:	42 df       	rcall	.-380    	; 0xf66 <uart_send>
    }
  }

  // kontroluje pøijatá data
  if ((!uart0_flags.data_received) && (uart_rx_size() > 8)) {
    10e2:	80 91 6a 00 	lds	r24, 0x006A
    10e6:	83 fd       	sbrc	r24, 3
    10e8:	4a c0       	rjmp	.+148    	; 0x117e <uart0_process+0x10a>
/******************************************************/
// Useful functions
/******************************************************/
inline byte uart_rx_size(void)
{
  return ((uart0_buf_rx_ptr_e - uart0_buf_rx_ptr_b) & UART0_BUFFER_LINEAR_SIZE_MAX);
    10ea:	80 91 72 00 	lds	r24, 0x0072
    10ee:	90 91 73 00 	lds	r25, 0x0073
    10f2:	89 1b       	sub	r24, r25
    10f4:	8f 70       	andi	r24, 0x0F	; 15
      uart_send();
    }
  }

  // kontroluje pøijatá data
  if ((!uart0_flags.data_received) && (uart_rx_size() > 8)) {
    10f6:	89 30       	cpi	r24, 0x09	; 9
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <uart0_process+0x88>
    10fa:	41 c0       	rjmp	.+130    	; 0x117e <uart0_process+0x10a>
    // máme alespoò 9 bytù dat a nejsou nezpracovaná data?


    // zjístíme adresu volného místa v paketovém pøijímacm bufferu
    iptr = (uart0_buf_pac_rx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;
    10fc:	b0 90 6d 00 	lds	r11, 0x006D
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	8b 0d       	add	r24, r11
    1104:	8f 70       	andi	r24, 0x0F	; 15
    1106:	b8 2e       	mov	r11, r24
    ptr = (byte *) &(uart0_buf_pac_rx[iptr].b[0]);
    1108:	e8 2e       	mov	r14, r24
    110a:	f1 2c       	mov	r15, r1
    110c:	f7 01       	movw	r30, r14
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	ee 0d       	add	r30, r14
    111c:	ff 1d       	adc	r31, r15
    111e:	cf 01       	movw	r24, r30
    1120:	82 5f       	subi	r24, 0xF2	; 242
    1122:	9e 4f       	sbci	r25, 0xFE	; 254
    1124:	6c 01       	movw	r12, r24
    1126:	8c 01       	movw	r16, r24
    1128:	07 5f       	subi	r16, 0xF7	; 247
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	ec 01       	movw	r28, r24

    // pøedáme do paketového pøijímacího bufferu
    for(i=0; i<9; i++) {
      *ptr = uart_get_char();
    112e:	f0 de       	rcall	.-544    	; 0xf10 <uart_get_char>
    1130:	89 93       	st	Y+, r24
    // zjístíme adresu volného místa v paketovém pøijímacm bufferu
    iptr = (uart0_buf_pac_rx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;
    ptr = (byte *) &(uart0_buf_pac_rx[iptr].b[0]);

    // pøedáme do paketového pøijímacího bufferu
    for(i=0; i<9; i++) {
    1132:	c0 17       	cp	r28, r16
    1134:	d1 07       	cpc	r29, r17
    1136:	d9 f7       	brne	.-10     	; 0x112e <uart0_process+0xba>
    1138:	f6 01       	movw	r30, r12
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    // odpovídá kontrolní souèet?
    sum = 0;
    for(i=0; i<8; i++) {
      sum += uart0_buf_pac_rx[iptr].b[i];
    113e:	21 91       	ld	r18, Z+
    1140:	92 0f       	add	r25, r18
      //uart0_buf_pac_rx[0].b[i] = uart_get_char(); 
    }
    
    // odpovídá kontrolní souèet?
    sum = 0;
    for(i=0; i<8; i++) {
    1142:	8f 5f       	subi	r24, 0xFF	; 255
    1144:	88 30       	cpi	r24, 0x08	; 8
    1146:	d9 f7       	brne	.-10     	; 0x113e <uart0_process+0xca>
      sum += uart0_buf_pac_rx[iptr].b[i];
    }
    if (sum == uart0_buf_pac_rx[iptr].b[8]) {
    1148:	f7 01       	movw	r30, r14
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	ee 0d       	add	r30, r14
    1158:	ff 1d       	adc	r31, r15
    115a:	e2 5f       	subi	r30, 0xF2	; 242
    115c:	fe 4f       	sbci	r31, 0xFE	; 254
    115e:	80 85       	ldd	r24, Z+8	; 0x08
    1160:	98 13       	cpse	r25, r24
    1162:	08 c0       	rjmp	.+16     	; 0x1174 <uart0_process+0x100>
      // souèet v poøádku
      uart0_flags.data_received = TRUE; 
    1164:	80 91 6a 00 	lds	r24, 0x006A
    1168:	88 60       	ori	r24, 0x08	; 8
    116a:	80 93 6a 00 	sts	0x006A, r24
      uart0_buf_pac_rx_ptr_e = iptr;
    116e:	b0 92 6d 00 	sts	0x006D, r11
    1172:	05 c0       	rjmp	.+10     	; 0x117e <uart0_process+0x10a>

     } else {
      uart0_flags.data_receive_error = TRUE;
    1174:	80 91 6a 00 	lds	r24, 0x006A
    1178:	80 61       	ori	r24, 0x10	; 16
    117a:	80 93 6a 00 	sts	0x006A, r24
    }
  }

}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	bf 90       	pop	r11
    1190:	08 95       	ret

00001192 <uart0_ISR_timer>:
void uart0_ISR_timer(void)
{
  static byte uart0_rx_timeout_flag = 0;
  
  // smazání náhodnì pøijatých dat
  if (uart0_rx_timeout > 0) {
    1192:	80 91 6c 00 	lds	r24, 0x006C
    1196:	88 23       	and	r24, r24
    1198:	41 f0       	breq	.+16     	; 0x11aa <uart0_ISR_timer+0x18>
    uart0_rx_timeout--;
    119a:	80 91 6c 00 	lds	r24, 0x006C
    119e:	81 50       	subi	r24, 0x01	; 1
    11a0:	80 93 6c 00 	sts	0x006C, r24
    uart0_rx_timeout_flag = false;
    11a4:	10 92 69 00 	sts	0x0069, r1
    11a8:	08 95       	ret
    } else {
    if (!uart0_rx_timeout_flag) {
    11aa:	80 91 69 00 	lds	r24, 0x0069
    11ae:	81 11       	cpse	r24, r1
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <uart0_ISR_timer+0x2e>
      uart0_buf_rx_ptr_b = uart0_buf_rx_ptr_e;
    11b2:	80 91 72 00 	lds	r24, 0x0072
    11b6:	80 93 73 00 	sts	0x0073, r24
      uart0_rx_timeout_flag = true;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 69 00 	sts	0x0069, r24
    11c0:	08 95       	ret

000011c2 <uart0_get_data_begin>:
// must be called uart0_get_data_end() at end of handling data
byte * uart0_get_data_begin(void)
{
  byte iptr;
  
  iptr = (uart0_buf_pac_rx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
    11c2:	80 91 6e 00 	lds	r24, 0x006E
    11c6:	8f 5f       	subi	r24, 0xFF	; 255
    11c8:	8f 70       	andi	r24, 0x0F	; 15
  return (byte *) &uart0_buf_pac_rx[iptr].b[0];
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	9c 01       	movw	r18, r24
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
}
    11de:	82 5f       	subi	r24, 0xF2	; 242
    11e0:	9e 4f       	sbci	r25, 0xFE	; 254
    11e2:	08 95       	ret

000011e4 <uart0_get_data_end>:
// must be called after uart0_get_data_begin()
byte uart0_get_data_end(void)
{
  byte i;
  
  i = (uart0_buf_pac_rx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
    11e4:	80 91 6e 00 	lds	r24, 0x006E
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	8f 70       	andi	r24, 0x0F	; 15
  uart0_buf_pac_rx_ptr_b = i;
    11ec:	80 93 6e 00 	sts	0x006E, r24
  return (uart0_buf_pac_rx_ptr_e == uart0_buf_pac_rx_ptr_b);
}

inline byte uart_pac_rx_size(void)
{
  return ((uart0_buf_pac_rx_ptr_e - uart0_buf_pac_rx_ptr_b) & UART0_BUFFER_PACKET_SIZE_MAX);
    11f0:	80 91 6d 00 	lds	r24, 0x006D
    11f4:	90 91 6e 00 	lds	r25, 0x006E
    11f8:	89 1b       	sub	r24, r25
    11fa:	8f 70       	andi	r24, 0x0F	; 15
  
  i = (uart0_buf_pac_rx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
  uart0_buf_pac_rx_ptr_b = i;
  
  i = uart_pac_rx_size();
  if (i == 0) {
    11fc:	29 f4       	brne	.+10     	; 0x1208 <uart0_get_data_end+0x24>
    uart0_flags.data_received = FALSE;
    11fe:	90 91 6a 00 	lds	r25, 0x006A
    1202:	97 7f       	andi	r25, 0xF7	; 247
    1204:	90 93 6a 00 	sts	0x006A, r25
  }
  return i;
}
    1208:	08 95       	ret

0000120a <uart0_put_data>:


//----------------------------------------------------------
// send packet pointed by dataptr
void uart0_put_data(byte * dataptr)
{
    120a:	fc 01       	movw	r30, r24
  byte i;
  byte iptr;
  byte sum;

  iptr = (uart0_buf_pac_tx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;
    120c:	50 91 6f 00 	lds	r21, 0x006F
    1210:	5f 5f       	subi	r21, 0xFF	; 255
    1212:	5f 70       	andi	r21, 0x0F	; 15

  sum = 0;
  // copy data with sum
  for(i=0; i<8; i++) {
    uart0_buf_pac_tx[iptr].b[i] = *dataptr;
    1214:	85 2f       	mov	r24, r21
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	dc 01       	movw	r26, r24
    121a:	aa 0f       	add	r26, r26
    121c:	bb 1f       	adc	r27, r27
    121e:	aa 0f       	add	r26, r26
    1220:	bb 1f       	adc	r27, r27
    1222:	aa 0f       	add	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	a8 0f       	add	r26, r24
    1228:	b9 1f       	adc	r27, r25
    122a:	a2 55       	subi	r26, 0x52	; 82
    122c:	be 4f       	sbci	r27, 0xFE	; 254
  byte iptr;
  byte sum;

  iptr = (uart0_buf_pac_tx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;

  sum = 0;
    122e:	30 e0       	ldi	r19, 0x00	; 0
  // copy data with sum
  for(i=0; i<8; i++) {
    1230:	20 e0       	ldi	r18, 0x00	; 0
    uart0_buf_pac_tx[iptr].b[i] = *dataptr;
    1232:	40 81       	ld	r20, Z
    1234:	4d 93       	st	X+, r20
    sum += *dataptr;
    1236:	41 91       	ld	r20, Z+
    1238:	34 0f       	add	r19, r20

  iptr = (uart0_buf_pac_tx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;

  sum = 0;
  // copy data with sum
  for(i=0; i<8; i++) {
    123a:	2f 5f       	subi	r18, 0xFF	; 255
    123c:	28 30       	cpi	r18, 0x08	; 8
    123e:	c9 f7       	brne	.-14     	; 0x1232 <uart0_put_data+0x28>
    uart0_buf_pac_tx[iptr].b[i] = *dataptr;
    sum += *dataptr;
    dataptr++;
  }
  uart0_buf_pac_tx[iptr].n.sum = sum; // save calculated sum
    1240:	fc 01       	movw	r30, r24
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	8e 0f       	add	r24, r30
    1250:	9f 1f       	adc	r25, r31
    1252:	fc 01       	movw	r30, r24
    1254:	e2 55       	subi	r30, 0x52	; 82
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	30 87       	std	Z+8, r19	; 0x08

  uart0_buf_pac_tx_ptr_e = iptr;
    125a:	50 93 6f 00 	sts	0x006F, r21
    125e:	08 95       	ret

00001260 <uart0_set_baud>:
// Set from default baud rates
#define MACRO_BAUDRATE(BAUDRATE) (UART0_PROC_UBRRL = (F_CPU / (16UL * BAUDRATE)) - 1)
void uart0_set_baud(byte baud)
{
  // UART port
  switch (baud) {
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	8b 30       	cpi	r24, 0x0B	; 11
    1264:	91 05       	cpc	r25, r1
    1266:	20 f5       	brcc	.+72     	; 0x12b0 <uart0_set_baud+0x50>
    1268:	fc 01       	movw	r30, r24
    126a:	ed 5e       	subi	r30, 0xED	; 237
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	09 94       	ijmp
    case 0:  
      MACRO_BAUDRATE(9600);
    1270:	8f e5       	ldi	r24, 0x5F	; 95
    1272:	89 b9       	out	0x09, r24	; 9
      break;
    1274:	08 95       	ret
    case 1:  
      MACRO_BAUDRATE(14400);
    1276:	8f e3       	ldi	r24, 0x3F	; 63
    1278:	89 b9       	out	0x09, r24	; 9
      break;
    127a:	08 95       	ret
    case 2:  
      MACRO_BAUDRATE(19200);
    127c:	8f e2       	ldi	r24, 0x2F	; 47
    127e:	89 b9       	out	0x09, r24	; 9
      break;
    1280:	08 95       	ret
    case 3:  
      MACRO_BAUDRATE(28800);
    1282:	8f e1       	ldi	r24, 0x1F	; 31
    1284:	89 b9       	out	0x09, r24	; 9
      break;
    1286:	08 95       	ret
    case 4:  
      MACRO_BAUDRATE(38400);
    1288:	87 e1       	ldi	r24, 0x17	; 23
    128a:	89 b9       	out	0x09, r24	; 9
      break;
    128c:	08 95       	ret
    case 5:  
      MACRO_BAUDRATE(57600);
    128e:	8f e0       	ldi	r24, 0x0F	; 15
    1290:	89 b9       	out	0x09, r24	; 9
      break;
    1292:	08 95       	ret
    case 6:  
      MACRO_BAUDRATE(76800);
    1294:	8b e0       	ldi	r24, 0x0B	; 11
    1296:	89 b9       	out	0x09, r24	; 9
      break;
    1298:	08 95       	ret
    case 7:  
      MACRO_BAUDRATE(115200);
    129a:	87 e0       	ldi	r24, 0x07	; 7
    129c:	89 b9       	out	0x09, r24	; 9
      break;
    129e:	08 95       	ret
    case 8:  
      MACRO_BAUDRATE(230400);
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	89 b9       	out	0x09, r24	; 9
      break;
    12a4:	08 95       	ret
    case 9:  
      MACRO_BAUDRATE(250000);
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	89 b9       	out	0x09, r24	; 9
      break;
    12aa:	08 95       	ret
    case 10:  
      MACRO_BAUDRATE(500000);
    12ac:	19 b8       	out	0x09, r1	; 9
      break;
    12ae:	08 95       	ret
    default:  
      MACRO_BAUDRATE(19200);
    12b0:	8f e2       	ldi	r24, 0x2F	; 47
    12b2:	89 b9       	out	0x09, r24	; 9
    12b4:	08 95       	ret

000012b6 <send_data>:
}

//----------------------------------------------------------
void send_data(void)
{
  uart0_put_data((byte *) &TB_bufOut);
    12b6:	8b ea       	ldi	r24, 0xAB	; 171
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a7 df       	rcall	.-178    	; 0x120a <uart0_put_data>
    12bc:	08 95       	ret

000012be <send_data2>:
}

//----------------------------------------------------------
void send_data2(void)
{
  uart0_put_data((byte *) &TB2_bufOut);
    12be:	80 ef       	ldi	r24, 0xF0	; 240
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	a3 df       	rcall	.-186    	; 0x120a <uart0_put_data>
    12c4:	08 95       	ret

000012c6 <__vector_5>:
word osv2;
byte osv1_on;
byte osv2_on;

//----------------------------------------------------------
ISR(TIMER1_CAPT_vect) {
    12c6:	1f 92       	push	r1
    12c8:	0f 92       	push	r0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	0f 92       	push	r0
    12ce:	11 24       	eor	r1, r1
    12d0:	8f 93       	push	r24
  static byte timer1_postscaler = 0;
  
  if (timer1_postscaler > 4) {
    12d2:	80 91 74 00 	lds	r24, 0x0074
    12d6:	85 30       	cpi	r24, 0x05	; 5
    12d8:	30 f0       	brcs	.+12     	; 0x12e6 <__vector_5+0x20>
    // T = 10ms
    timer0_flag = true;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	80 93 76 00 	sts	0x0076, r24
    timer1_postscaler = 0;
    12e0:	10 92 74 00 	sts	0x0074, r1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <__vector_5+0x26>
  } else {
    timer1_postscaler++;
    12e6:	8f 5f       	subi	r24, 0xFF	; 255
    12e8:	80 93 74 00 	sts	0x0074, r24
  }
}
    12ec:	8f 91       	pop	r24
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <led_blik>:

void led_blik(void)
{
  led_timer = 2;
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	80 93 75 00 	sts	0x0075, r24
  led_on(led_comm);
    12fe:	80 91 40 02 	lds	r24, 0x0240
    1302:	82 60       	ori	r24, 0x02	; 2
    1304:	80 93 40 02 	sts	0x0240, r24
    1308:	08 95       	ret

0000130a <zaverka_close>:
}

//----------------------------------------------------
inline void pulse_close(void)
{
  PORTD |= BV(PD6);
    130a:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    130c:	26 e6       	ldi	r18, 0x66	; 102
    130e:	86 ee       	ldi	r24, 0xE6	; 230
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	21 50       	subi	r18, 0x01	; 1
    1314:	80 40       	sbci	r24, 0x00	; 0
    1316:	90 40       	sbci	r25, 0x00	; 0
    1318:	e1 f7       	brne	.-8      	; 0x1312 <zaverka_close+0x8>
}

//----------------------------------------------------
inline void pulse_off(void)
{
  PORTD &= ~(BV(PD5) | BV(PD6));
    131a:	82 b3       	in	r24, 0x12	; 18
    131c:	8f 79       	andi	r24, 0x9F	; 159
    131e:	82 bb       	out	0x12, r24	; 18
    1320:	08 95       	ret

00001322 <zaverka_open>:
inline void outB_ena(void) { osv2_on = 1;}

//----------------------------------------------------
inline void pulse_open(void)
{
  PORTD |= BV(PD5);
    1322:	95 9a       	sbi	0x12, 5	; 18
    1324:	26 e6       	ldi	r18, 0x66	; 102
    1326:	86 ee       	ldi	r24, 0xE6	; 230
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	21 50       	subi	r18, 0x01	; 1
    132c:	80 40       	sbci	r24, 0x00	; 0
    132e:	90 40       	sbci	r25, 0x00	; 0
    1330:	e1 f7       	brne	.-8      	; 0x132a <zaverka_open+0x8>
}

//----------------------------------------------------
inline void pulse_off(void)
{
  PORTD &= ~(BV(PD5) | BV(PD6));
    1332:	82 b3       	in	r24, 0x12	; 18
    1334:	8f 79       	andi	r24, 0x9F	; 159
    1336:	82 bb       	out	0x12, r24	; 18
    1338:	08 95       	ret

0000133a <try_receive_data>:
  uart0_put_data((byte *) &TB2_bufOut);
}

//----------------------------------------------------------
void try_receive_data(void)
{
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
  byte i;
  byte *ptr;
  
  if (!uart_pac_rx_empty()) {
    133e:	e0 dd       	rcall	.-1088   	; 0xf00 <uart_pac_rx_empty>
    1340:	81 11       	cpse	r24, r1
    1342:	f0 c0       	rjmp	.+480    	; 0x1524 <try_receive_data+0x1ea>
    ptr = uart0_get_data_begin();
    1344:	3e df       	rcall	.-388    	; 0x11c2 <uart0_get_data_begin>
    1346:	eb eb       	ldi	r30, 0xBB	; 187
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	dc 01       	movw	r26, r24
    134c:	c9 ef       	ldi	r28, 0xF9	; 249
    134e:	d0 e0       	ldi	r29, 0x00	; 0
    1350:	84 ec       	ldi	r24, 0xC4	; 196
    1352:	90 e0       	ldi	r25, 0x00	; 0
    for (i=0; i<9; i++) {
      TB_bufIn[i]  = *ptr;
    1354:	2c 91       	ld	r18, X
    1356:	21 93       	st	Z+, r18
      TB2_bufIn[i] = *ptr;
    1358:	2d 91       	ld	r18, X+
    135a:	29 93       	st	Y+, r18
  byte i;
  byte *ptr;
  
  if (!uart_pac_rx_empty()) {
    ptr = uart0_get_data_begin();
    for (i=0; i<9; i++) {
    135c:	e8 17       	cp	r30, r24
    135e:	f9 07       	cpc	r31, r25
    1360:	c9 f7       	brne	.-14     	; 0x1354 <try_receive_data+0x1a>
      TB_bufIn[i]  = *ptr;
      TB2_bufIn[i] = *ptr;
      ptr++;
    }
    uart0_get_data_end();
    1362:	40 df       	rcall	.-384    	; 0x11e4 <uart0_get_data_end>
    if (TB_Read() == 0) {
    1364:	55 d7       	rcall	.+3754   	; 0x2210 <_etext+0xaee>
    1366:	81 11       	cpse	r24, r1
    1368:	b1 c0       	rjmp	.+354    	; 0x14cc <try_receive_data+0x192>
      led_blik();
    136a:	c6 df       	rcall	.-116    	; 0x12f8 <led_blik>
      switch (TB_Decode()) {
    136c:	70 d7       	rcall	.+3808   	; 0x224e <_etext+0xb2c>
    136e:	8e 30       	cpi	r24, 0x0E	; 14
    1370:	21 f0       	breq	.+8      	; 0x137a <try_receive_data+0x40>
    1372:	8f 30       	cpi	r24, 0x0F	; 15
    1374:	09 f4       	brne	.+2      	; 0x1378 <try_receive_data+0x3e>
    1376:	87 c0       	rjmp	.+270    	; 0x1486 <try_receive_data+0x14c>
    1378:	d5 c0       	rjmp	.+426    	; 0x1524 <try_receive_data+0x1ea>
        case TB_CMD_SIO:
          if (TB_bufIn[TB_BUF_MOTOR] == 1) { // analog output (mimo dokumentaci)
    137a:	80 91 be 00 	lds	r24, 0x00BE
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	09 f0       	breq	.+2      	; 0x1384 <try_receive_data+0x4a>
    1382:	5b c0       	rjmp	.+182    	; 0x143a <try_receive_data+0x100>
            switch (TB_bufIn[TB_BUF_TYPE]) {
    1384:	80 91 bd 00 	lds	r24, 0x00BD
    1388:	88 23       	and	r24, r24
    138a:	19 f0       	breq	.+6      	; 0x1392 <try_receive_data+0x58>
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	49 f1       	breq	.+82     	; 0x13e2 <try_receive_data+0xa8>
    1390:	4f c0       	rjmp	.+158    	; 0x1430 <try_receive_data+0xf6>
              case 0:
                // hard limit max. value
                if (TB_Value > 120) {
    1392:	80 91 a7 00 	lds	r24, 0x00A7
    1396:	90 91 a8 00 	lds	r25, 0x00A8
    139a:	a0 91 a9 00 	lds	r26, 0x00A9
    139e:	b0 91 aa 00 	lds	r27, 0x00AA
    13a2:	89 37       	cpi	r24, 0x79	; 121
    13a4:	91 05       	cpc	r25, r1
    13a6:	a1 05       	cpc	r26, r1
    13a8:	b1 05       	cpc	r27, r1
    13aa:	64 f0       	brlt	.+24     	; 0x13c4 <try_receive_data+0x8a>
                  TB_Value = 120;
    13ac:	88 e7       	ldi	r24, 0x78	; 120
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a0 e0       	ldi	r26, 0x00	; 0
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	80 93 a7 00 	sts	0x00A7, r24
    13b8:	90 93 a8 00 	sts	0x00A8, r25
    13bc:	a0 93 a9 00 	sts	0x00A9, r26
    13c0:	b0 93 aa 00 	sts	0x00AA, r27
                }
                osv1 = (word) TB_Value;
    13c4:	40 91 a7 00 	lds	r20, 0x00A7
    13c8:	50 91 a8 00 	lds	r21, 0x00A8
    13cc:	60 91 a9 00 	lds	r22, 0x00A9
    13d0:	70 91 aa 00 	lds	r23, 0x00AA
    13d4:	50 93 3f 02 	sts	0x023F, r21
    13d8:	40 93 3e 02 	sts	0x023E, r20
                TB_SendAck(TB_ERR_OK, TB_Value);
    13dc:	84 e6       	ldi	r24, 0x64	; 100
    13de:	ff d6       	rcall	.+3582   	; 0x21de <_etext+0xabc>
                break;
    13e0:	2c c0       	rjmp	.+88     	; 0x143a <try_receive_data+0x100>
              case 1:
                if (TB_Value > 60) {
    13e2:	80 91 a7 00 	lds	r24, 0x00A7
    13e6:	90 91 a8 00 	lds	r25, 0x00A8
    13ea:	a0 91 a9 00 	lds	r26, 0x00A9
    13ee:	b0 91 aa 00 	lds	r27, 0x00AA
    13f2:	cd 97       	sbiw	r24, 0x3d	; 61
    13f4:	a1 05       	cpc	r26, r1
    13f6:	b1 05       	cpc	r27, r1
    13f8:	64 f0       	brlt	.+24     	; 0x1412 <try_receive_data+0xd8>
                  TB_Value = 60;
    13fa:	8c e3       	ldi	r24, 0x3C	; 60
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e0       	ldi	r26, 0x00	; 0
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	80 93 a7 00 	sts	0x00A7, r24
    1406:	90 93 a8 00 	sts	0x00A8, r25
    140a:	a0 93 a9 00 	sts	0x00A9, r26
    140e:	b0 93 aa 00 	sts	0x00AA, r27
                }
                osv2 = (word) TB_Value;
    1412:	40 91 a7 00 	lds	r20, 0x00A7
    1416:	50 91 a8 00 	lds	r21, 0x00A8
    141a:	60 91 a9 00 	lds	r22, 0x00A9
    141e:	70 91 aa 00 	lds	r23, 0x00AA
    1422:	50 93 42 02 	sts	0x0242, r21
    1426:	40 93 41 02 	sts	0x0241, r20
                TB_SendAck(TB_ERR_OK, TB_Value);
    142a:	84 e6       	ldi	r24, 0x64	; 100
    142c:	d8 d6       	rcall	.+3504   	; 0x21de <_etext+0xabc>
                break;
    142e:	05 c0       	rjmp	.+10     	; 0x143a <try_receive_data+0x100>
              default:
                TB_SendAck(TB_ERR_TYPE, 0); // invalid value
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	ba 01       	movw	r22, r20
    1436:	83 e0       	ldi	r24, 0x03	; 3
    1438:	d2 d6       	rcall	.+3492   	; 0x21de <_etext+0xabc>
                break;
            }
          };
          if (TB_bufIn[TB_BUF_MOTOR] == 2) { // digital output
    143a:	80 91 be 00 	lds	r24, 0x00BE
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	09 f0       	breq	.+2      	; 0x1444 <try_receive_data+0x10a>
    1442:	70 c0       	rjmp	.+224    	; 0x1524 <try_receive_data+0x1ea>
            switch (TB_bufIn[TB_BUF_TYPE]) {
    1444:	80 91 bd 00 	lds	r24, 0x00BD
    1448:	88 23       	and	r24, r24
    144a:	19 f0       	breq	.+6      	; 0x1452 <try_receive_data+0x118>
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	71 f0       	breq	.+28     	; 0x146c <try_receive_data+0x132>
    1450:	69 c0       	rjmp	.+210    	; 0x1524 <try_receive_data+0x1ea>
              case 0:
                if (TB_out.b0 != 0) {
    1452:	80 91 89 00 	lds	r24, 0x0089
    1456:	80 ff       	sbrs	r24, 0
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <try_receive_data+0x128>
  led_on(led_comm);
}

inline void outA_dis(void) { osv1_on = 0; OCR1A = 0;}
inline void outB_dis(void) { osv2_on = 0; OCR1B = 0;}
inline void outA_ena(void) { osv1_on = 1;}
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	80 93 45 02 	sts	0x0245, r24
    1460:	61 c0       	rjmp	.+194    	; 0x1524 <try_receive_data+0x1ea>
{
  led_timer = 2;
  led_on(led_comm);
}

inline void outA_dis(void) { osv1_on = 0; OCR1A = 0;}
    1462:	10 92 45 02 	sts	0x0245, r1
    1466:	1b bc       	out	0x2b, r1	; 43
    1468:	1a bc       	out	0x2a, r1	; 42
    146a:	5c c0       	rjmp	.+184    	; 0x1524 <try_receive_data+0x1ea>
                  // ch 0 vypnuto
                  outA_dis();
                }
                return;
              case 1:
                if (TB_out.b1 != 0) {
    146c:	80 91 89 00 	lds	r24, 0x0089
    1470:	81 ff       	sbrs	r24, 1
    1472:	04 c0       	rjmp	.+8      	; 0x147c <try_receive_data+0x142>
}

inline void outA_dis(void) { osv1_on = 0; OCR1A = 0;}
inline void outB_dis(void) { osv2_on = 0; OCR1B = 0;}
inline void outA_ena(void) { osv1_on = 1;}
inline void outB_ena(void) { osv2_on = 1;}
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	80 93 44 02 	sts	0x0244, r24
    147a:	54 c0       	rjmp	.+168    	; 0x1524 <try_receive_data+0x1ea>
  led_timer = 2;
  led_on(led_comm);
}

inline void outA_dis(void) { osv1_on = 0; OCR1A = 0;}
inline void outB_dis(void) { osv2_on = 0; OCR1B = 0;}
    147c:	10 92 44 02 	sts	0x0244, r1
    1480:	19 bc       	out	0x29, r1	; 41
    1482:	18 bc       	out	0x28, r1	; 40
    1484:	4f c0       	rjmp	.+158    	; 0x1524 <try_receive_data+0x1ea>
            };
          };
          break;
        case TB_CMD_GIO:
          // analog inputs (measure)
          if (TB_bufIn[TB_BUF_TYPE] < 8) {
    1486:	80 91 bd 00 	lds	r24, 0x00BD
    148a:	88 30       	cpi	r24, 0x08	; 8
    148c:	38 f4       	brcc	.+14     	; 0x149c <try_receive_data+0x162>
            // return ADC data
            TB_SendAck(TB_ERR_OK, adc_get(TB_bufIn[TB_BUF_TYPE]));
    148e:	1a d6       	rcall	.+3124   	; 0x20c4 <_etext+0x9a2>
    1490:	ac 01       	movw	r20, r24
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	84 e6       	ldi	r24, 0x64	; 100
    1498:	a2 d6       	rcall	.+3396   	; 0x21de <_etext+0xabc>
    149a:	44 c0       	rjmp	.+136    	; 0x1524 <try_receive_data+0x1ea>
            } else if (TB_bufIn[TB_BUF_TYPE] == 8) {
    149c:	88 30       	cpi	r24, 0x08	; 8
    149e:	39 f4       	brne	.+14     	; 0x14ae <try_receive_data+0x174>
              // return actual channel 0
              TB_SendAck(TB_ERR_OK, OCR1A);
    14a0:	4a b5       	in	r20, 0x2a	; 42
    14a2:	5b b5       	in	r21, 0x2b	; 43
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	84 e6       	ldi	r24, 0x64	; 100
    14aa:	99 d6       	rcall	.+3378   	; 0x21de <_etext+0xabc>
    14ac:	3b c0       	rjmp	.+118    	; 0x1524 <try_receive_data+0x1ea>
            } else if ((TB_bufIn[TB_BUF_TYPE] == 9)) {
    14ae:	89 30       	cpi	r24, 0x09	; 9
    14b0:	39 f4       	brne	.+14     	; 0x14c0 <try_receive_data+0x186>
              // return actual channel 1
              TB_SendAck(TB_ERR_OK, OCR1B);
    14b2:	48 b5       	in	r20, 0x28	; 40
    14b4:	59 b5       	in	r21, 0x29	; 41
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	84 e6       	ldi	r24, 0x64	; 100
    14bc:	90 d6       	rcall	.+3360   	; 0x21de <_etext+0xabc>
    14be:	32 c0       	rjmp	.+100    	; 0x1524 <try_receive_data+0x1ea>
          } else {
           // requested channel not exist
           TB_SendAck(TB_ERR_TYPE, 0);
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	ba 01       	movw	r22, r20
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	8a d6       	rcall	.+3348   	; 0x21de <_etext+0xabc>
    14ca:	2c c0       	rjmp	.+88     	; 0x1524 <try_receive_data+0x1ea>
          break;
      } // switch
    } // if TB_Read
     else
    {
    if (TB2_Read() == 0) {
    14cc:	0e da       	rcall	.-3044   	; 0x8ea <TB2_Read>
    14ce:	81 11       	cpse	r24, r1
    14d0:	29 c0       	rjmp	.+82     	; 0x1524 <try_receive_data+0x1ea>
      led_blik();
    14d2:	12 df       	rcall	.-476    	; 0x12f8 <led_blik>
        switch (TB2_Decode()) {
    14d4:	29 da       	rcall	.-2990   	; 0x928 <TB2_Decode>
    14d6:	8e 30       	cpi	r24, 0x0E	; 14
    14d8:	29 f5       	brne	.+74     	; 0x1524 <try_receive_data+0x1ea>
          case TB_CMD_SIO:
            if (TB2_out.b0) {
    14da:	80 91 c8 00 	lds	r24, 0x00C8
    14de:	80 ff       	sbrs	r24, 0
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <try_receive_data+0x1d0>
              // close
              if (zaverka) {
    14e2:	80 91 43 02 	lds	r24, 0x0243
    14e6:	81 11       	cpse	r24, r1
    14e8:	1d c0       	rjmp	.+58     	; 0x1524 <try_receive_data+0x1ea>
                // closed
                //
               } else {
                // do close
                zaverka_close();
    14ea:	0f df       	rcall	.-482    	; 0x130a <zaverka_close>
                zaverka = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 43 02 	sts	0x0243, r24
                led_on (led_zav_b);
                led_off(led_zav_a);
    14f2:	80 91 40 02 	lds	r24, 0x0240
    14f6:	8f 7b       	andi	r24, 0xBF	; 191
    14f8:	80 68       	ori	r24, 0x80	; 128
    14fa:	80 93 40 02 	sts	0x0240, r24
        // DEBUG !!!
                uart0_flags.data_receive_error = false;
    14fe:	80 91 6a 00 	lds	r24, 0x006A
    1502:	8f 7e       	andi	r24, 0xEF	; 239
    1504:	80 93 6a 00 	sts	0x006A, r24
    1508:	0d c0       	rjmp	.+26     	; 0x1524 <try_receive_data+0x1ea>
        // DEBUG !!!
              }
             } else { 
              // open
              if (zaverka) {
    150a:	80 91 43 02 	lds	r24, 0x0243
    150e:	88 23       	and	r24, r24
    1510:	49 f0       	breq	.+18     	; 0x1524 <try_receive_data+0x1ea>
                // do open
                zaverka_open();
    1512:	07 df       	rcall	.-498    	; 0x1322 <zaverka_open>
                zaverka = 0;
    1514:	10 92 43 02 	sts	0x0243, r1
                led_on (led_zav_a);
                led_off(led_zav_b);
    1518:	80 91 40 02 	lds	r24, 0x0240
    151c:	8f 77       	andi	r24, 0x7F	; 127
    151e:	80 64       	ori	r24, 0x40	; 64
    1520:	80 93 40 02 	sts	0x0240, r24
          //case
        }
      } // if TB2_Read
      } // else if TB_Read
  } // if data_received
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	08 95       	ret

0000152a <process_leds>:

//----------------------------------------------------------
void process_leds(void)
{
  // master OK led
  if (uart0_flags.data_receive_error) {
    152a:	80 91 6a 00 	lds	r24, 0x006A
    152e:	84 ff       	sbrs	r24, 4
    1530:	06 c0       	rjmp	.+12     	; 0x153e <process_leds+0x14>
    led_off(led_ok);
    1532:	80 91 40 02 	lds	r24, 0x0240
    1536:	8e 7f       	andi	r24, 0xFE	; 254
    1538:	80 93 40 02 	sts	0x0240, r24
    153c:	05 c0       	rjmp	.+10     	; 0x1548 <process_leds+0x1e>
   } else {
    led_on(led_ok);
    153e:	80 91 40 02 	lds	r24, 0x0240
    1542:	81 60       	ori	r24, 0x01	; 1
    1544:	80 93 40 02 	sts	0x0240, r24
  }
  
  // osv leds & on/off outputs
  if (osv1_on) {
    1548:	80 91 45 02 	lds	r24, 0x0245
    154c:	88 23       	and	r24, r24
    154e:	61 f0       	breq	.+24     	; 0x1568 <process_leds+0x3e>
    OCR1A = osv1;
    1550:	80 91 3e 02 	lds	r24, 0x023E
    1554:	90 91 3f 02 	lds	r25, 0x023F
    1558:	9b bd       	out	0x2b, r25	; 43
    155a:	8a bd       	out	0x2a, r24	; 42
    led_on(led_ov1_ok);
    155c:	80 91 40 02 	lds	r24, 0x0240
    1560:	84 60       	ori	r24, 0x04	; 4
    1562:	80 93 40 02 	sts	0x0240, r24
    1566:	07 c0       	rjmp	.+14     	; 0x1576 <process_leds+0x4c>
   } else {
    OCR1A = 0;
    1568:	1b bc       	out	0x2b, r1	; 43
    156a:	1a bc       	out	0x2a, r1	; 42
    led_off(led_ov1_ok);
    156c:	80 91 40 02 	lds	r24, 0x0240
    1570:	8b 7f       	andi	r24, 0xFB	; 251
    1572:	80 93 40 02 	sts	0x0240, r24
  }
  if (osv2_on) {
    1576:	80 91 44 02 	lds	r24, 0x0244
    157a:	88 23       	and	r24, r24
    157c:	61 f0       	breq	.+24     	; 0x1596 <process_leds+0x6c>
    OCR1B = osv2;
    157e:	80 91 41 02 	lds	r24, 0x0241
    1582:	90 91 42 02 	lds	r25, 0x0242
    1586:	99 bd       	out	0x29, r25	; 41
    1588:	88 bd       	out	0x28, r24	; 40
    led_on(led_ov2_ok);
    158a:	80 91 40 02 	lds	r24, 0x0240
    158e:	80 61       	ori	r24, 0x10	; 16
    1590:	80 93 40 02 	sts	0x0240, r24
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <process_leds+0x7a>
   } else {
    OCR1B = 0;
    1596:	19 bc       	out	0x29, r1	; 41
    1598:	18 bc       	out	0x28, r1	; 40
    led_off(led_ov2_ok);
    159a:	80 91 40 02 	lds	r24, 0x0240
    159e:	8f 7e       	andi	r24, 0xEF	; 239
    15a0:	80 93 40 02 	sts	0x0240, r24
  }
  
  // osv err leds
  if ((adc_get(ADC_U0) > 800) || (adc_get(ADC_U0) < 3)) {
    15a4:	84 e0       	ldi	r24, 0x04	; 4
    15a6:	8e d5       	rcall	.+2844   	; 0x20c4 <_etext+0x9a2>
    15a8:	81 32       	cpi	r24, 0x21	; 33
    15aa:	93 40       	sbci	r25, 0x03	; 3
    15ac:	20 f4       	brcc	.+8      	; 0x15b6 <process_leds+0x8c>
    15ae:	84 e0       	ldi	r24, 0x04	; 4
    15b0:	89 d5       	rcall	.+2834   	; 0x20c4 <_etext+0x9a2>
    15b2:	03 97       	sbiw	r24, 0x03	; 3
    15b4:	30 f4       	brcc	.+12     	; 0x15c2 <process_leds+0x98>
    led_on(led_ov1_err);
    15b6:	80 91 40 02 	lds	r24, 0x0240
    15ba:	88 60       	ori	r24, 0x08	; 8
    15bc:	80 93 40 02 	sts	0x0240, r24
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <process_leds+0xa2>
   } else {
    led_off(led_ov1_err);
    15c2:	80 91 40 02 	lds	r24, 0x0240
    15c6:	87 7f       	andi	r24, 0xF7	; 247
    15c8:	80 93 40 02 	sts	0x0240, r24
  }
  if ((adc_get(ADC_U1) > 800) || (adc_get(ADC_U1) < 3)) {
    15cc:	83 e0       	ldi	r24, 0x03	; 3
    15ce:	7a d5       	rcall	.+2804   	; 0x20c4 <_etext+0x9a2>
    15d0:	81 32       	cpi	r24, 0x21	; 33
    15d2:	93 40       	sbci	r25, 0x03	; 3
    15d4:	20 f4       	brcc	.+8      	; 0x15de <process_leds+0xb4>
    15d6:	83 e0       	ldi	r24, 0x03	; 3
    15d8:	75 d5       	rcall	.+2794   	; 0x20c4 <_etext+0x9a2>
    15da:	03 97       	sbiw	r24, 0x03	; 3
    15dc:	30 f4       	brcc	.+12     	; 0x15ea <process_leds+0xc0>
    led_on(led_ov2_err);
    15de:	80 91 40 02 	lds	r24, 0x0240
    15e2:	80 62       	ori	r24, 0x20	; 32
    15e4:	80 93 40 02 	sts	0x0240, r24
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <process_leds+0xca>
   } else {
    led_off(led_ov2_err);
    15ea:	80 91 40 02 	lds	r24, 0x0240
    15ee:	8f 7d       	andi	r24, 0xDF	; 223
    15f0:	80 93 40 02 	sts	0x0240, r24
  }
  
  // comm led timeout
  if (led_timer > 0) {
    15f4:	80 91 75 00 	lds	r24, 0x0075
    15f8:	88 23       	and	r24, r24
    15fa:	51 f0       	breq	.+20     	; 0x1610 <process_leds+0xe6>
    led_timer--;
    15fc:	81 50       	subi	r24, 0x01	; 1
    15fe:	80 93 75 00 	sts	0x0075, r24
    if (led_timer == 0) {
    1602:	81 11       	cpse	r24, r1
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <process_leds+0xe6>
      led_off(led_comm);
    1606:	80 91 40 02 	lds	r24, 0x0240
    160a:	8d 7f       	andi	r24, 0xFD	; 253
    160c:	80 93 40 02 	sts	0x0240, r24
    1610:	08 95       	ret

00001612 <process_timer_100Hz>:


//----------------------------------------------------------
void process_timer_100Hz(void)
{
  if (timer0_flag) { // T = 10ms
    1612:	80 91 76 00 	lds	r24, 0x0076
    1616:	88 23       	and	r24, r24
    1618:	31 f0       	breq	.+12     	; 0x1626 <process_timer_100Hz+0x14>
    timer0_flag = false;
    161a:	10 92 76 00 	sts	0x0076, r1
    uart0_ISR_timer();
    161e:	b9 dd       	rcall	.-1166   	; 0x1192 <uart0_ISR_timer>
    adc_process();
    1620:	5f d5       	rcall	.+2750   	; 0x20e0 <_etext+0x9be>
   
    // urèí stav led diod
    process_leds();
    1622:	83 df       	rcall	.-250    	; 0x152a <process_leds>
    // odele stav vech led
    led_send();
    1624:	1c d5       	rcall	.+2616   	; 0x205e <_etext+0x93c>
    1626:	08 95       	ret

00001628 <init>:

//----------------------------------------------------------
void init(void)
{

  DDRB = BV(PB0) | BV(PB1) | BV(PB2); // LEDs + PWM outputs
    1628:	87 e0       	ldi	r24, 0x07	; 7
    162a:	87 bb       	out	0x17, r24	; 23
  PORTB = 0;
    162c:	18 ba       	out	0x18, r1	; 24
  DDRD = BV(PD1) | BV(PD2) | BV(PD5) | BV(PD6) | BV(PD7); // com + driver + LEDs
    162e:	86 ee       	ldi	r24, 0xE6	; 230
    1630:	81 bb       	out	0x11, r24	; 17

  leds=0;
    1632:	10 92 40 02 	sts	0x0240, r1
  led_send();
    1636:	13 d5       	rcall	.+2598   	; 0x205e <_etext+0x93c>
  zaverka = 0;
    1638:	10 92 43 02 	sts	0x0243, r1
  uart0_init();
    163c:	0f dd       	rcall	.-1506   	; 0x105c <uart0_init>
  timer_init();
    163e:	71 d5       	rcall	.+2786   	; 0x2122 <_etext+0xa00>
  adc_init();
    1640:	2c d5       	rcall	.+2648   	; 0x209a <_etext+0x978>
  
  osv1 = 0;
    1642:	10 92 3f 02 	sts	0x023F, r1
    1646:	10 92 3e 02 	sts	0x023E, r1
  osv1_on = 0;
    164a:	10 92 45 02 	sts	0x0245, r1
  osv2 = 0;
    164e:	10 92 42 02 	sts	0x0242, r1
    1652:	10 92 41 02 	sts	0x0241, r1
  osv2_on = 0;
    1656:	10 92 44 02 	sts	0x0244, r1
  
  TB_Callback_setBaud = &uart0_set_baud;
    165a:	80 e3       	ldi	r24, 0x30	; 48
    165c:	99 e0       	ldi	r25, 0x09	; 9
    165e:	90 93 62 00 	sts	0x0062, r25
    1662:	80 93 61 00 	sts	0x0061, r24
  TB_Callback_TX = &send_data;
    1666:	8b e5       	ldi	r24, 0x5B	; 91
    1668:	99 e0       	ldi	r25, 0x09	; 9
    166a:	90 93 64 00 	sts	0x0064, r25
    166e:	80 93 63 00 	sts	0x0063, r24
  TB2_Callback_TX = &send_data2;
    1672:	8f e5       	ldi	r24, 0x5F	; 95
    1674:	99 e0       	ldi	r25, 0x09	; 9
    1676:	90 93 68 00 	sts	0x0068, r25
    167a:	80 93 67 00 	sts	0x0067, r24
  TB_Init ((void*) 0x10); // addr in eeprom with settings
    167e:	80 e1       	ldi	r24, 0x10	; 16
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	74 d5       	rcall	.+2792   	; 0x216c <_etext+0xa4a>
  TB2_Init((void*) 0x20); // addr in eeprom with settings
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	df d8       	rcall	.-3650   	; 0x848 <TB2_Init>
  OCR1A = 3;
    168a:	83 e0       	ldi	r24, 0x03	; 3
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9b bd       	out	0x2b, r25	; 43
    1690:	8a bd       	out	0x2a, r24	; 42
  OCR1B = 3;
    1692:	99 bd       	out	0x29, r25	; 41
    1694:	88 bd       	out	0x28, r24	; 40
  sei();
    1696:	78 94       	sei
    1698:	08 95       	ret

0000169a <main>:
}

//----------------------------------------------------------
int main(void)
{
  init();
    169a:	c6 df       	rcall	.-116    	; 0x1628 <init>
  
  led_on(led_ok);
  led_on (led_zav_a);
  led_off(led_zav_b);
    169c:	80 91 40 02 	lds	r24, 0x0240
    16a0:	8f 77       	andi	r24, 0x7F	; 127
    16a2:	81 64       	ori	r24, 0x41	; 65
    16a4:	80 93 40 02 	sts	0x0240, r24
    
  while(1) { // mail loop
  
    process_timer_100Hz();
    16a8:	b4 df       	rcall	.-152    	; 0x1612 <process_timer_100Hz>
    uart0_process();
    16aa:	e4 dc       	rcall	.-1592   	; 0x1074 <uart0_process>
    try_receive_data();
    16ac:	46 de       	rcall	.-884    	; 0x133a <try_receive_data>
    16ae:	fc cf       	rjmp	.-8      	; 0x16a8 <main+0xe>

000016b0 <__eerd_block_m8>:
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22

000016b4 <__eerd_blraw_m8>:
    16b4:	fc 01       	movw	r30, r24
    16b6:	e1 99       	sbic	0x1c, 1	; 28
    16b8:	fe cf       	rjmp	.-4      	; 0x16b6 <__eerd_blraw_m8+0x2>
    16ba:	06 c0       	rjmp	.+12     	; 0x16c8 <__eerd_blraw_m8+0x14>
    16bc:	ff bb       	out	0x1f, r31	; 31
    16be:	ee bb       	out	0x1e, r30	; 30
    16c0:	e0 9a       	sbi	0x1c, 0	; 28
    16c2:	31 96       	adiw	r30, 0x01	; 1
    16c4:	0d b2       	in	r0, 0x1d	; 29
    16c6:	0d 92       	st	X+, r0
    16c8:	41 50       	subi	r20, 0x01	; 1
    16ca:	50 40       	sbci	r21, 0x00	; 0
    16cc:	b8 f7       	brcc	.-18     	; 0x16bc <__eerd_blraw_m8+0x8>
    16ce:	08 95       	ret

000016d0 <__eeupd_byte_m8>:
    16d0:	26 2f       	mov	r18, r22

000016d2 <__eeupd_r18_m8>:
    16d2:	e1 99       	sbic	0x1c, 1	; 28
    16d4:	fe cf       	rjmp	.-4      	; 0x16d2 <__eeupd_r18_m8>
    16d6:	9f bb       	out	0x1f, r25	; 31
    16d8:	8e bb       	out	0x1e, r24	; 30
    16da:	e0 9a       	sbi	0x1c, 0	; 28
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	0d b2       	in	r0, 0x1d	; 29
    16e0:	02 16       	cp	r0, r18
    16e2:	31 f0       	breq	.+12     	; 0x16f0 <__eeupd_r18_m8+0x1e>
    16e4:	2d bb       	out	0x1d, r18	; 29
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	e2 9a       	sbi	0x1c, 2	; 28
    16ec:	e1 9a       	sbi	0x1c, 1	; 28
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	08 95       	ret

000016f2 <__eewr_block_m8>:
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <__eewr_block_m8+0xa>
    16f8:	2d 91       	ld	r18, X+
    16fa:	05 d0       	rcall	.+10     	; 0x1706 <__eewr_r18_m8>
    16fc:	41 50       	subi	r20, 0x01	; 1
    16fe:	50 40       	sbci	r21, 0x00	; 0
    1700:	d8 f7       	brcc	.-10     	; 0x16f8 <__eewr_block_m8+0x6>
    1702:	08 95       	ret

00001704 <__eewr_byte_m8>:
    1704:	26 2f       	mov	r18, r22

00001706 <__eewr_r18_m8>:
    1706:	e1 99       	sbic	0x1c, 1	; 28
    1708:	fe cf       	rjmp	.-4      	; 0x1706 <__eewr_r18_m8>
    170a:	9f bb       	out	0x1f, r25	; 31
    170c:	8e bb       	out	0x1e, r24	; 30
    170e:	2d bb       	out	0x1d, r18	; 29
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	e2 9a       	sbi	0x1c, 2	; 28
    1716:	e1 9a       	sbi	0x1c, 1	; 28
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	08 95       	ret

0000171e <_exit>:
    171e:	f8 94       	cli

00001720 <__stop_program>:
    1720:	ff cf       	rjmp	.-2      	; 0x1720 <__stop_program>
